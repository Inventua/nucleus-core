@model Nucleus.Modules.Account.ViewModels.Login
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@Html.AddStyle("~/Resources/css/forms.css")
@using (Html.BeginNucleusForm("Login", "Login", "Account", FormMethod.Post, new { data_target = "form.parent()" }))
{
	<fieldset aria-label="Login">
		@if (!String.IsNullOrEmpty(Model.Message))
		{
			<div class="alert alert-warning">@Model.Message</div>
		}
		@Html.HiddenFor(model => model.ReturnUrl)
		@Html.HiddenFor(model => model.ShowVerificationToken)
		<div>
			<label>
				<span>User name</span>
				<span>@Html.TextBoxFor(model => model.Username, new { @autocorrect = "off", @autocapitalize = "none" })</span>
			</label>
		</div>
		<div>
			<label>
				<span>Password</span>
				<span>@Html.PasswordFor(model => model.Password, new { @value = Model.Password })</span>
			</label>
		</div>

		@if (Model.ShowVerificationToken)
		{
			<div class="alert alert-primary mt-3">
				Please enter the verification code from your welcome e-mail and click Login.
			</div>
			<div>
				<label>
					<span>Verification Token</span>
					<span>@Html.TextBoxFor(model => model.VerificationToken)</span>
				</label>
			</div>
		}

		@if (Model.AllowRememberMe)
		{
			<div>
				<label>
					Remember Me?
					@Html.CheckBoxFor(model => model.RememberMe)
				</label>
			</div>
		}
		<div class="mt-2">
			<input type="submit" value="Login" class="btn btn-primary" data-target="form.parent()" />
			<a href="/" class="btn btn-secondary">Cancel</a>

			@if (Model.AllowUsernameRecovery | Model.AllowPasswordReset)
			{
				@Html.LinkButton("", "Trouble logging in?", @Url.NucleusAction("Index", "Recover", "Account"), false, new { returnurl = Model.ReturnUrl, data_target = "form.parent()" })
			}
		</div>
	</fieldset>
}
