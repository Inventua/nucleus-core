@model Nucleus.Modules.Publish.ViewModels.Editor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@if (!String.IsNullOrEmpty(Model.UseLayout))
{
	Layout = Model.UseLayout;
  @Html.AddScript(AddScriptHtmlHelper.WellKnownScripts.JQUERY)
  @Html.AddScript(AddScriptHtmlHelper.WellKnownScripts.BOOTSTRAP)
}
@Html.AddScript(AddScriptHtmlHelper.WellKnownScripts.NUCLEUS_MONACO_EDITOR)
@Html.AddStyle("~#/settings.css")
<h2 class="nucleus-modal-caption">Article Settings</h2>
@using (Html.BeginNucleusForm("Editor", "Admin", "Publish", FormMethod.Post, new { @enctype = "multipart/form-data", @data_target = @Model.Standalone ? "form.parent()" : "#ArticleEditor" }))
{
	<Tab>
		<TabItem target="#article-properties" caption="Properties" active="true"></TabItem>
		<TabItem target="#article-body" caption="Content"></TabItem>
		@if (Model.Categories.Any())
		{
			<TabItem target="#article-categories" caption="Categories"></TabItem>
		}
		<TabItem target="#article-attachments" caption="Attachments"></TabItem>
	</Tab>
	<TabContent>
		<TabPanel id="article-properties" active="true">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Article Properties</h2>

				@Html.HiddenFor(model => model.Article.Id)
				@Html.HiddenFor(Model => Model.Standalone)
	
				<SettingsControl caption="Title" helptext="Title of the article.">
					@Html.TextBoxFor(model => model.Article.Title, new { @maxlength = 256} )
				</SettingsControl>

				<SettingsControl caption="Sub Title" helptext="Sub-title of the article. This value is use when you want a secondary title for your article.">
					@Html.TextBoxFor(model => model.Article.SubTitle, new { @maxlength = 256} )
				</SettingsControl>

				<SettingsControl caption="Summary" helptext="Summary of the article. A short summary about the the contents of the article.">
					@Html.TextAreaFor(model => model.Article.Summary, new { @maxlength = 256} )
				</SettingsControl>
					
				<SettingsControl caption="Image" helptext="Image of the article. Displays an image alongside the article content when article is viewed.">
					<div class="nucleus-flex-fields nucleus-fileselector">
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { file = Model.Article.ImageFile, propertyName = "Article.ImageFile", selectAnotherActionName = "SelectAnotherImage", pattern = "(.gif|.png|.jpg|.jpeg|.bmp|.webp)" })
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { folder = Model.Article.ImageFile?.Parent, actionName = "UploadImageFile", Filter = "image/*" })
					</div>
				</SettingsControl>

				<SettingsControl caption="Description" helptext="Description of the article. A longer summary on the subject of the article.">
					@Html.TextAreaFor(model => model.Article.Description, new { @maxlength = 512} )
				</SettingsControl>


				<div class="nucleus-flex-fields">
					<SettingsControl caption="Enabled?" helptext="Specifies whether the article is visible to users." rendermode="LabelLast" class="inner-inline">
						@Html.CheckBoxFor(model => model.Article.Enabled, new { @class = "ToggleSwitch" })
					</SettingsControl>

					<SettingsControl caption="Featured?" helptext="Featured articles are shown at the top of the list." rendermode="LabelLast" class="inner-inline">
						@Html.CheckBoxFor(model => model.Article.Featured, new { @class = "ToggleSwitch" })
					</SettingsControl>

					<SettingsControl caption="Publish Date" helptext="Article publication date.  The article will not be visible before this date.">
						@Html.TextBoxFor(model => model.Article.PublishDate, Model.Article.PublishDate.HasValue ? Model.Article.PublishDate.Value.ToString("yyyy-MM-ddTHH:mm") : "", new { @type = "datetime-local", @step = "60" })
					</SettingsControl>

					<SettingsControl caption="Expiry Date" helptext="Article expiry date.  The article will not be visible after this date.">
						@Html.TextBoxFor(model => model.Article.ExpireDate, Model.Article.ExpireDate.HasValue ? Model.Article.ExpireDate.Value.ToString("yyyy-MM-ddTHH:mm") : "", new { @type = "datetime-local", @step = "60"})
					</SettingsControl>
				</div>
			</fieldset>
			
		</TabPanel>
		<TabPanel id="article-body">
				@Html.TextAreaFor(model => model.Article.Body, new { @class = "HtmlEditorControl flex-fill" })
		</TabPanel>

		@if (Model.Categories.Any())
		{
			<TabPanel id="article-categories">
				<fieldset role="group" aria-labelledby="heading">
					<h2>Categories</h2>
					<div class="d-grid">
						@for (var categoryCount = 0; categoryCount < Model.Categories.Count; categoryCount++)
						{
							<label>
								@Html.CheckBoxFor(model => model.Categories[categoryCount].IsSelected)
								@Html.HiddenFor(model => model.Categories[categoryCount].Category.CategoryListItem.Id)
								@Html.HiddenFor(model => model.Categories[categoryCount].Category.CategoryListItem.Name)
								<span class="d-inline-block">@Model.Categories[categoryCount].Category.CategoryListItem.Name</span>
							</label>
						}
					</div>
				</fieldset>
			</TabPanel>
		}
		<TabPanel id="article-attachments">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Add New Attachment</h2>

				<SettingsControl caption="Image" helptext="">
					<div class="nucleus-flex-fields nucleus-fileselector">
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { file = Model.SelectedAttachmentFile, propertyName = "SelectedAttachmentFile", selectAnotherActionName = "SelectAnotherAttachment" })
						@if (Model.SelectedAttachmentFile?.Id != Guid.Empty)
						{
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { folder = Model.SelectedAttachmentFile?.Parent, actionName = "UploadAttachment" })
						}
					</div>
					@if (Model.SelectedAttachmentFile?.Id == Guid.Empty)
					{
						<div class="nucleus-flex-fields nucleus-fileselector">
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { folder = Model.SelectedAttachmentFile?.Parent, actionName = "UploadAttachment" })
						</div>
					}						
				</SettingsControl>
				@Html.SubmitButton("", "Add Attachment", @Url.NucleusAction("AddAttachment", "Admin", "Publish"), new { })

				@if (Model.Article.Attachments.Any())
				{
					<h2 class="mt-4">Attachments</h2>
					<table class="table table-sm">
						@for (var attachmentCount = 0; attachmentCount < Model.Article.Attachments.Count; attachmentCount++)
						{
							<tr>
								<td>
									@Html.HiddenFor(attachment => Model.Article.Attachments[attachmentCount].Id)
									@Html.HiddenFor(attachment => Model.Article.Attachments[attachmentCount].File.Id)
									@Html.HiddenFor(attachment => Model.Article.Attachments[attachmentCount].File.Provider)
									@Html.HiddenFor(attachment => Model.Article.Attachments[attachmentCount].File.Path)
									@Html.HiddenFor(attachment => Model.Article.Attachments[attachmentCount].File.Name)
									<a href="@Url.FileLink(Model.Article.Attachments[attachmentCount].File)" alt="@Model.Article.Attachments[attachmentCount].File?.Name" target="_blank">
										@(Model.Article.Attachments[attachmentCount].File?.Name ?? "Missing or Deleted File")
									</a>
								</td>
								<td class="nucleus-small-cell">
									<input type="submit" title="Delete Attachment" value="&#xe14c;" class="nucleus-material-icon btn btn-danger" formaction="@Url.NucleusAction("DeleteAttachment", "Admin", "Publish")?id=@Model.Article.Attachments[attachmentCount].Id" data-confirm="Delete this attachment?" />
								</td>
							</tr>
						}
					</table>
				}

			</fieldset>
		</TabPanel>
	</TabContent>
	<div class="nucleus-form-buttonrow">
		<div class="nucleus-form-tools">
			@Html.SubmitButton("", "Save Article", @Url.NucleusAction("SaveArticle", "Admin", "Publish"), new { @data_target="#ArticleEditor.parent()" })
		</div>
    <button type="button" class="btn btn-secondary ms-auto" data-bs-dismiss="modal">Close</button>
	</div>
}
