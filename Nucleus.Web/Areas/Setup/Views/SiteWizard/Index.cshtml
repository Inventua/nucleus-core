@model Nucleus.Web.ViewModels.Setup.SiteWizard
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Abstractions
@addTagHelper "*, Nucleus.ViewFeatures"
@{
	Layout = "_Generic";
	ViewData["title"] = "Nucleus Setup Wizard";
}
@Html.AddStyle("~!index.css")

@{
	var disabledAttr = new { disabled = "disabled" };
	var enabledAttr = new { };
}

@using (Html.BeginAreaForm("Install", "SiteWizard", "Setup", FormMethod.Post, new { @data_target = "document" }))
{
	<Modal id="site-wizard" title="Nucleus Setup Wizard" can-close="false">
		<img class="logo" src="../../../../Resources/Images/nucleus.png" height="90" width="81"/>
		<h1>Welcome to Nucleus.</h1>
		<p>This wizard will help you to set up your site.</p>
		
		@Html.HiddenFor(model => model.SelectedTemplate)
		@Html.HiddenFor(model => model.TemplateTempFileName)
		@if ((Model.Preflight == null || Model.Preflight.IsValid()) && (Model.SelectedTemplate == null || Model.OtherWarnings.Count() > 0 || Model.MissingExtensionWarnings.Count() > 0))
		{
			<h2>Site Template</h2>
			<p>
				This wizard will automatically set up pages, roles, list entries and other data to get you started.  Please select a site template below.
			</p>
			<SettingsControl caption="Site Template" helptext="Select your site template.">
				@Html.DropDownListFor(model => model.SelectedTemplate, new SelectList(Model.Templates, nameof(Nucleus.Web.ViewModels.Setup.SiteWizard.SiteTemplate.FileName), nameof(Nucleus.Web.ViewModels.Setup.SiteWizard.SiteTemplate.Title)))
			</SettingsControl>

			@if (Model.OtherWarnings.Count() > 0)
			{
				<div class="alert alert-danger">
					<h3>Warning</h3>
					<div>
						One or more extensions in the <strong>Setup/Extensions</strong> folder is invalid.
					</div>
					<ul>
						@foreach (string warning in Model.OtherWarnings)
						{
							<li>@warning</li>
						}
					</ul>

					Installation cannot proceed.  Please correct the issue and click 'Next''.
				</div>
			}

			@if (Model.MissingExtensionWarnings.Count() > 0)
			{
				<div class="alert alert-danger">
					<h3>Required Extensions Missing</h3>
					<div>
						One or more modules, layouts or containers are used by the selected template, but are not contained within any of the extensions in the Setup/Extensions folder.
					</div>
					<ul>
						@foreach (string warning in Model.MissingExtensionWarnings)
						{
							<li>@warning</li>
						}
					</ul>
					
					Installation cannot proceed.  Please correct the issue and click 'Next''.
				</div>
			}

			<div class="nucleus-button-panel justify-content-end">
				<button class="btn btn-primary" type="submit" title="Next" formaction="@Url.AreaAction("Index", "SiteWizard", "Setup")">Next</button>
			</div>
		}
		else
		{
			<Tab class="nav-pills nav-justified">
				@if (Model.Preflight != null)
				{
					<TabItem caption="Configuration Checks" active="true" target="#site-preflight"></TabItem>
				}

				@if (Model.Preflight == null || Model.Preflight.IsValid())
				{
					<TabItem caption="Install" active="@(Model.Preflight == null ? true : false)" target="#site-install"></TabItem>
					<TabItem caption="Site" target="#site-settings"></TabItem>
					<TabItem caption="Users" target="#user-settings"></TabItem>
				}
			</Tab>
			<TabContent>
				@if (Model.Preflight != null)
				{
					<TabPanel id="site-preflight" active="true">
						<div class="mb-1 d-flex">
							@if (Model.Preflight != null)
							{
								@if (!Model.Preflight.IsValid())
								{
									<span class="nucleus-material-icon status-error medium-icon">!</span>
									<span class="medium-icon-text">
										Configuration checks have failed (@Model.Preflight.ErrorCount() error@(@Model.Preflight.ErrorCount() == 1 ? "" : "s")).  Please address the errors below and click 'Retry'.  
										<br/>
										If you need to modify configuration files you may need to restart Nucleus for changes to take effect.
									</span>
								}
								else
								{
									<span class="nucleus-material-icon status-ok medium-icon">&#xe5ca;</span>
									<span class="medium-icon-text">Configuration checks were successful.</span>
								}								
							}
							<button type="button" class="btn btn-secondary ms-auto" onclick="window.location='@Url.AreaAction("Index", "SiteWizard", "Setup")';">Retry</button>
						</div>
						<table class="table table-sm align-middle small mt-2">
							<thead class="table-dark">
								<tr>
									<th scope="col"></th>
									<th scope="col">Message</th>
									<th scope="col">Code</th>
								</tr>
							</thead>
							@foreach (var result in Model.Preflight)
							{
								<tr>
									<td class="nucleus-material-icon text-center status-col status-col-@(result.Status.ToString().ToLower())" style="width: 3rem">
										@switch (result.Status)
										{
											case IPreflight.Status.OK:
												@Html.Raw("&#xe5ca;")
												break;
											case IPreflight.Status.Warning:
												@Html.Raw("&#xe002;")
												break;
											case IPreflight.Status.Error:
												@Html.Raw("&#xe000;")
												break;
										}
									</td>
									<td>@result.Message</td>
									<td class="code-col">@result.Code</td>
								</tr>
							}
						</table>
					</TabPanel>
				}

				@if (Model.Preflight == null || Model.Preflight.IsValid())
				{
					<TabPanel id="site-install" active="@(Model.Preflight == null ? true : false)">
						<fieldset role="group" aria-labelledby="heading">
							<h2>Install Extensions</h2>
							<p>
								Select the extensions that you want to install.  You can install more extensions later.  Extensions shown with a disabled checkbox
								are required, and can't be un-selected because they are used by the site template.
							</p>

							@for (var count = 0; count < Model.InstallableExtensions.Count(); count++)
							{
								<div class="installable-package">
									<label>
										<span>
											@Html.HiddenFor(model => model.InstallableExtensions[count].Filename)
											@if (Model.InstallableExtensions[count].IsRequired)
											{
												@Html.HiddenFor(model => model.InstallableExtensions[count].IsSelected)
												<span class="nucleus-material-icon placeholder-checkbox">&#xe834;</span>
											}
											else
											{
												@Html.CheckBoxFor(model => model.InstallableExtensions[count].IsSelected, Model.InstallableExtensions[count].IsRequired ? disabledAttr : enabledAttr)
											}
											<span class="fw-bold">@Model.InstallableExtensions[count].Name</span>@Model.InstallableExtensions[count].PackageVersion
										</span>
										<span>@Model.InstallableExtensions[count].Description</span>
										<span>
											<span class="fst-italic">Publisher</span> <a href="@Model.InstallableExtensions[count].PublisherUrl">@Model.InstallableExtensions[count].Publisher</a>											
										</span>
									</label>
								</div>
							}
						</fieldset>
					</TabPanel>

					<TabPanel id="site-settings">
						<fieldset role="group" aria-labelledby="heading">
							<h2>Site Settings</h2>

							<SettingsControl caption="Site Name" helptext="Enter a name for your site.  This value can be displayed on-screen, depending on the selected layout.">
								@Html.HiddenFor(model => model.Site.Id)
								@Html.TextBoxFor(model => model.Site.Name)
							</SettingsControl>

							<SettingsControl caption="Default Alias (url)" helptext="Enter the primary url for your new site.  Example: 'mysite.com' or 'mysite.com/site1'.">
								@Html.HiddenFor(model => model.Site.DefaultSiteAlias.Id)
								@Html.TextBoxFor(model => model.Site.DefaultSiteAlias.Alias)
							</SettingsControl>

							<SettingsControl caption="Home directory" helptext="Enter the home directory for this site's files, relative to the Nucleus files folder root.">
								@Html.TextBoxFor(model => model.Site.HomeDirectory)
							</SettingsControl>

							@*<h3>Appearance</h3>
							<div class="nucleus-flex-fields">
								<SettingsControl caption="Default Layout" helptext="Select a default layout for your site.">
									@Html.DropDownListFor(model => model.Site.DefaultLayoutDefinition.Id, new SelectList(Model.Layouts, "Id", "FriendlyName"))
								</SettingsControl>

								<SettingsControl caption="Default Container" helptext="Select a default container for your site.">
									@Html.DropDownListFor((model) => model.Site.DefaultContainerDefinition.Id, new SelectList(Model.Containers, "Id", "FriendlyName"))
								</SettingsControl>
							</div>*@

							<h3>Security Roles</h3>
							<div class="nucleus-flex-fields">
								<SettingsControl caption="Administrators Role" helptext="Enter a name for your site's administrators role.  Members of this role can manage all settings for your site.">
									@Html.HiddenFor(model => model.Site.AdministratorsRole.Id)
									@Html.HiddenFor(model => model.Site.AdministratorsRole.Description)
									@if (Model.Site.AdministratorsRole.RoleGroup != null)
									{
										@Html.HiddenFor(model => model.Site.AdministratorsRole.RoleGroup.Id)
									}
									@Html.HiddenFor(model => model.Site.AdministratorsRole.Type)
									@Html.TextBoxFor(model => model.Site.AdministratorsRole.Name)
								</SettingsControl>

								<SettingsControl caption="Registered Users Role" helptext="Enter a name for your site's registered users role.  All logged in users are automatically considered to be members of this role.  You can use the registered users role to control access to pages/modules which should apply to logged-on users only.">
									@Html.HiddenFor(model => model.Site.RegisteredUsersRole.Id)
									@Html.HiddenFor(model => model.Site.RegisteredUsersRole.Description)
									@if (Model.Site.RegisteredUsersRole.RoleGroup != null)
									{
										@Html.HiddenFor(model => model.Site.RegisteredUsersRole.RoleGroup.Id)
									}
									@Html.HiddenFor(model => model.Site.RegisteredUsersRole.Type)
									@Html.TextBoxFor(model => model.Site.RegisteredUsersRole.Name)
								</SettingsControl>
							</div>

							<div class="nucleus-flex-fields">
								<SettingsControl caption="Anonymous Users Role" helptext="Enter a name for your site's anomymous users role.  This role represents users who are not logged in.  You can use the anonymous users role to assign permissions to pages and modules which should apply when a user is not logged in (like view permissions to a module containing a prompt to register and log in.).">
									@Html.HiddenFor(model => model.Site.AnonymousUsersRole.Id)
									@Html.HiddenFor(model => model.Site.AnonymousUsersRole.Description)
									@if (Model.Site.AnonymousUsersRole.RoleGroup != null)
									{
										@Html.HiddenFor(model => model.Site.AnonymousUsersRole.RoleGroup.Id)
									}
									@Html.HiddenFor(model => model.Site.AnonymousUsersRole.Type)
									@Html.TextBoxFor(model => model.Site.AnonymousUsersRole.Name)
								</SettingsControl>

								<SettingsControl caption="All Users Role" helptext="Enter a name for your site's all users role.  You can use the all users role to assign permissions to pages and modules which should apply to all users, whether they are logged in or not.">
									@Html.HiddenFor(model => model.Site.AllUsersRole.Id)
									@Html.HiddenFor(model => model.Site.AllUsersRole.Description)
									@if (Model.Site.AllUsersRole.RoleGroup != null)
									{
										@Html.HiddenFor(model => model.Site.AllUsersRole.RoleGroup.Id)
									}
									@Html.HiddenFor(model => model.Site.AllUsersRole.Type)
									@Html.TextBoxFor(model => model.Site.AllUsersRole.Name)
								</SettingsControl>
							</div>
						</fieldset>
					</TabPanel>

					<TabPanel id="user-settings">
						<fieldset role="group" aria-labelledby="heading">
							<h2>User Settings</h2>

							@if (Model.CreateSystemAdministratorUser)
							{
								<SettingsControl caption="System Administrator User Name" helptext="Enter a user name for your system administrator user.  This user can manage all sites.">
									@Html.TextBoxFor(model => model.SystemAdminUserName)
								</SettingsControl>

								<div class="nucleus-flex-fields">
									<SettingsControl caption="System Administrator User Password" helptext="Enter a password for the system administrator.">
										@Html.PasswordFor(model => model.SystemAdminPassword)
									</SettingsControl>
									<SettingsControl caption="Confirm Password" helptext="Confirm the password for the system administrator.">
										@Html.PasswordFor(model => model.SystemAdminConfirmPassword)
									</SettingsControl>
								</div>
							}
							<SettingsControl caption="Site Administrator User Name" helptext="Enter a user name for your site's administrator user.  This user will be able to manage the site which is being created by the installation wizard.">
								@Html.TextBoxFor(model => model.SiteAdminUserName)
							</SettingsControl>

							<div class="nucleus-flex-fields">
								<SettingsControl caption="Site Administrator User Password" helptext="Enter a password for the site administrator user.">
									@Html.PasswordFor(model => model.SiteAdminPassword)
								</SettingsControl>
								<SettingsControl caption="Confirm Password" helptext="Confirm the password for the site administrator user.">
									@Html.PasswordFor(model => model.SiteAdminConfirmPassword)
								</SettingsControl>
							</div>

						</fieldset>
					</TabPanel>
				}
			</TabContent>

			<div class="nucleus-button-panel justify-content-end">
				<button id="wizard-button-back" class="collapse btn btn-secondary" type="button" title="Back">Back</button>

				@if (Model.Preflight == null || Model.Preflight.IsValid())
				{
					<button id="wizard-button-next" class="collapse show btn btn-primary" type="button" title="Next">Next</button>
					<button id="wizard-button-finish" class="collapse btn btn-success" type="submit" title="Finish">Finish</button>
				}
			</div>
		}

	</Modal>
}

<script>
	jQuery(document).ready(function ()
	{
		jQuery('button[data-bs-toggle="tab"][data-bs-target="#user-settings"]').on('shown.bs.tab', function (event)
		{
			jQuery('#wizard-button-next').removeClass('show');
			jQuery('#wizard-button-finish').addClass('show');
		});

		jQuery('button[data-bs-toggle="tab"]:not([data-bs-target="#user-settings"])').on('shown.bs.tab', function (event)
		{
			jQuery('#wizard-button-next').addClass('show');
			jQuery('#wizard-button-finish').removeClass('show');
		});

		jQuery('button[data-bs-toggle="tab"][data-bs-target="#site-install"]').on('shown.bs.tab', function (event)
		{
			jQuery('#wizard-button-back').removeClass('show');
		});

		jQuery('button[data-bs-toggle="tab"]:not([data-bs-target="#site-install"])').on('shown.bs.tab', function (event)
		{
			jQuery('#wizard-button-back').addClass('show');
		});

		jQuery('#site-wizard').modal('show');
		jQuery('#wizard-button-back, #wizard-button-next').on('click', navigateTab);

		Page.EnableEnhancedToolTips(true);
	});

	function navigateTab(e)
	{
		e.preventDefault();

		var clickedButton = jQuery(e.currentTarget);
		var currentTab = jQuery('.nav-item').has('.active');
		var newTab;

		if (clickedButton.is('#wizard-button-back'))
		{
			newTab = currentTab.prev();
		}
		else
		{
			newTab = currentTab.next();
		}

		newTab.find('.nav-link').tab('show');
	}
</script>
