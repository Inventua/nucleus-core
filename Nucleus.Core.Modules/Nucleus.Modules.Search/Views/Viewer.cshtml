@model Nucleus.Modules.Search.ViewModels.Viewer
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Extensions
@using Nucleus.Modules.Search.ViewModels
@Html.AddStyle("~!/../viewer.css")
@Html.AddScript("~!/../viewer.js")
@using (Html.BeginNucleusForm("Suggest", "Search", "Search", FormMethod.Post, new { @data_target = ".search-suggestions", @role = "search", @data_resultsurl = Url.Content(Model.ResultsUrl) }))
{
	@Html.HiddenFor(model=>model.Settings.IncludeFiles)
	@Html.HiddenFor(model=>model.Settings.IncludeScopes)
	@Html.HiddenFor(model=>model.Settings.MaximumSuggestions)
	@Html.HiddenFor(model=>model.Settings.SearchProvider)

  <div class="search-display-@Model.Settings.DisplayMode.ToString().ToLower()">
    @if (Model.Settings.DisplayMode == Settings.DisplayModes.Full)
    {
      <label>
        <span>@Model.Settings.SearchCaption</span>
        @await Html.PartialAsync("_ViewerInput.cshtml", Model)
      </label>
    }    
    else
    {
      @await Html.PartialAsync("_ViewerInput.cshtml", Model)
    }
  </div>
	@if (Model.Settings.MaximumSuggestions > 0)
	{
		<div class="search-suggestions collapse@(Model.SearchResults?.Results?.Any() == true ? " show" : "")"></div>
	}
}
@if (Model.Settings.ResultsPageId == Guid.Empty)
{
	@if (Model.SearchResults != null)
	{
		@if (Model.SearchResults.Total == 0)
		{
      <div>No results for '@Model.SearchTerm'@Html.Raw(".")</div>
		}
		else
		{
			<div>Displaying search results @(((Model.PagingSettings.CurrentPageIndex - 1) * @Model.PagingSettings.PageSize) + 1) to @Model.PagingSettings.LastDisplayedRowIndex of @Model.SearchResults.Total for '@Model.SearchTerm'@Html.Raw(".")</div>
		}
	}

	@using (Html.BeginNucleusForm("Index", "Search", "Search", FormMethod.Post, new { @data_target = "form.parent()", @role = "search" }))
	{
		@Html.HiddenFor(model => model.SearchTerm, new { @id = ""})
		@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.PagingControl), new { model = @Model.PagingSettings, propertyName = nameof(Model.PagingSettings) })

		@if (Model.SearchResults?.Results?.Any() == true)
		{
      <div class="search-results">
			  @foreach (var result in Model.SearchResults.Results)
			  {
				  <div class="search-result">
            <div>
              <a class="result-link" href="@result.Url" title="@result.Title?.Trim()">@result.Title?.Trim()</a>
              @if (Model.Settings.ShowType && !String.IsNullOrEmpty(result.Type))
              {
                <span class="fst-italic small text-muted result-type">@result.Type</span>
              }
            </div>          
            @if (Model.Settings.ShowUrl)
					  {
						  <span class="fst-italic small result-url">@Url.GetAbsoluteUri(result.Url)</span>
					  }
					  @if ((Model.Settings.ShowPublishDate || Model.Settings.ShowSize) && (result.PublishedDate.HasValue || result.Size.HasValue))
					  {
						  <div class="text-muted small fst-italic result-meta">
							  @if (Model.Settings.ShowPublishDate && result.PublishedDate.HasValue)
							  {
								  <span>Published: @result.PublishedDate.FormatDate(this.Context.Request.GetUserTimeZone())@Html.Raw(".")</span>
							  }

                @if (Model.Settings.ShowSize && result.Size.HasValue && result.Scope == @Nucleus.Abstractions.Models.FileSystem.File.URN)
							  {
								  <span>@result.Size.FormatFileSize()</span>
							  }
						  </div>
					  }

					  @if (Model.Settings.ShowSummary && !String.IsNullOrEmpty(@result.Summary))
					  {
						  <div class="result-summary">@result.Summary</div>
					  }
					  @if (Model.Settings.ShowCategories && result.Categories != null && result.Categories.Any())
					  {
						  <ul class="list-inline comma-separated result-categories">
							  @foreach (var category in result.Categories)
							  {
								  <li class="list-inline-item">@category.Name</li>
							  }
						  </ul>
					  }

            @{
              double? assessmentCalculation = 0;
              string assessmentText = "";

              if (Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0 && result.Score.HasValue)
              {
                assessmentCalculation = result.Score / Model.SearchResults.MaxScore.Value * 100;
                assessmentText = assessmentCalculation switch
                {
                  > 99 => "Best Match",
                  > 75 => "Good Match",
                  > 50 => "Medium Match",
                  _ => "Low Match"
                };
              }
            }
            @if ((Model.Settings.ShowScoreAssessment && Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0) || (Model.Settings.ShowScore && result.Score.HasValue && assessmentCalculation.HasValue))
            {
              <span class="fw-light small result-score">
                @if (Model.Settings.ShowScoreAssessment && Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0 && result.Score.HasValue)
                {
                  @assessmentText
                }
                @if (Model.Settings.ShowScoreAssessment && Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0 && Model.Settings.ShowScore && result.Score.HasValue && assessmentCalculation.HasValue)
                {
                  <text> - </text>
                }
                @if (Model.Settings.ShowScore && assessmentCalculation.HasValue)
                {
                  <text>Score: </text>
                  @assessmentCalculation.Value.ToString("0.0")
                  <text>%</text>
                }
              </span>
            }          
				  </div>
			  }
      </div>
    }
	}
}
<script>
  // position the suggestions drop-down below the search term text box
  try
  {
    jQuery('.search-suggestions').each(function(index) 
    {
      var element = jQuery(this).parents('section').find('.search-term');
      if (element.length !== 0)
      {
        jQuery(this).css('left', element.offset().left);
      }
    });
  }
  catch (error)
  {
    console.error(error);
  }

  @if (!String.IsNullOrEmpty(Model.SearchTerm) && Model.SearchResults != null)
  { 
    <text>
    jQuery(document).ready(function ()
    {
      if (typeof gtag !== 'undefined')
      {
        gtag('event', 'search', 
        { 
          'term': '@Model.SearchTerm', 
          'total-results': @Model.SearchResults.Total 
        });
      }
    });
    </text>
  }
</script>