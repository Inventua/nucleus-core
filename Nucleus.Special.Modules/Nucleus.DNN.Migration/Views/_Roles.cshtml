@model Nucleus.DNN.Migration.ViewModels.Role
@Html.AddStyle("~!/../index.css")
<h2 class="nucleus-control-panel-heading">Migrate DNN Roles and Groups</h2>
<div>
  <div class="alert alert-primary">
    <ul>
      <li>Role groups are only migrated if they contain at least one role.</li>
      <li>Roles with no users assigned to them are un-selected by default.</li>
      <li>The "Administrators" and "Registered Users" roles will not be migrated because Nucleus has these roles.</li>
      <li>There @(@Model.RoleGroups.Where(roleGroup => roleGroup.CanSelect).Count() == 1 ? "is" : "are") @(Model.RoleGroups.Where(roleGroup => roleGroup.CanSelect).Count()) role group@(@Model.RoleGroups.Count == 1 ? "" : "s") which can be migrated.</li>
      <li>There are @Model.Roles.Where(role => role.CanSelect).Count() roles which can be migrated.</li>
    </ul>
  </div>

  @using (Html.BeginNucleusForm("MigrateRoles", "DNNMigration", "DNNMigration", FormMethod.Post, new { data_target = "#MigrateRoles" }))
  {
    @Html.HiddenFor(model => model.PortalId)
    <div class="nucleus-flex-fields">
      <SettingsControl caption="Update Existing?" rendermode="LabelLast" class="inner-inline" helptext="Specifies whether to update role groups and roles when a matching name is found.  If this is not set, existing role groups and roles will generate an error.">
			  @Html.CheckBoxFor(model => model.UpdateExisting, new { @class = "ToggleSwitch" })
		  </SettingsControl>

      <button type="submit" class="btn btn-primary nucleus-show-progress nucleus-show-progress-before" data-confirm="Migrate selected Roles and Groups from DotNetNuke now?  This action cannot be reversed.">Migrate Roles and Groups</button>
    </div>
    <div class="my-2">
      <h2>Role Groups</h2>
      <div class="overflow-auto">
        <table class="table table-striped table-sm table-sticky-headers">
        <thead>
          <tr>
            <th>@Html.CheckBox("toggle-all", true, new { @class = "toggle-all", @id = "" } )</th>
            <th>Id</th>
            <th>Name</th>
            <th>Messages</th>
          </tr>
        </thead>
        <tbody>
        @for (int index = 0; index < Model.RoleGroups.Count; index++)
        {
          <tr>
            <td>
              @if (Model.RoleGroups[index].CanSelect)
              {
                @Html.CheckBoxFor(model=> model.RoleGroups[index].IsSelected)
              }
              @Html.HiddenFor(model=> model.RoleGroups[index].CanSelect)
              @Html.HiddenFor(model=> model.RoleGroups[index].RoleGroupId)
            </td>
            <td>@Model.RoleGroups[index].RoleGroupId</td>
            <td>@Model.RoleGroups[index].RoleGroupName</td>
            <td>
              <table class="table table-sm table-borderless validation-results">
                @foreach (var result in Model.RoleGroups[index].Results)
                {
                  <tr>
                    <td class="glyph-@result.Type">@result.Message</td>
                  </tr>
                }
              </table>
            </td>
          </tr>
        }
          </tbody>
      </table>
      </div>
    </div>

    <div>
      <h2>Roles</h2>
      <div class="overflow-auto">
      <table class="table table-striped table-sm">
        <thead>
          <tr>
            <th>@Html.CheckBox("toggle-all", true, new { @class = "toggle-all", @id = "" } )</th>
            <th>Id</th>
            <th>Name</th>
            <th>Role Group</th>
            <th>Messages</th>
          </tr>
        </thead>
        @for (int index = 0; index < Model.Roles.Count; index++)
        {
          <tr>
            <td>
              @Html.HiddenFor(model=> model.Roles[index].RoleId)
              @if (Model.Roles[index].CanSelect)
              {
                @Html.CheckBoxFor(model=> model.Roles[index].IsSelected)
              }
              @Html.HiddenFor(model=> model.Roles[index].CanSelect)              
            </td>
            <td>@Model.Roles[index].RoleId</td>
            <td>@Model.Roles[index].RoleName</td>
            <td>@Model.Roles[index].RoleGroup?.RoleGroupName</td>
            <td>
              <table class="table table-sm table-borderless validation-results">
                @foreach (var result in Model.Roles[index].Results)
                {
                  <tr>
                    <td class="glyph-@result.Type">@result.Message</td>
                  </tr>
                }
              </table>
            </td>
          </tr>
        }
      </table>
      </div>
    </div>
  }
</div>
