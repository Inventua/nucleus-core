@model Nucleus.Web.ViewModels.Admin.PageEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
<div class="d-flex overflow-auto flex-column h-100@(Model.PageEditorMode != Nucleus.Web.ViewModels.Admin.PageEditor.PageEditorModes.Default ? " nucleus-editor-panel" : "")">
  @if (Model.PageEditorMode != Nucleus.Web.ViewModels.Admin.PageEditor.PageEditorModes.Default)
  {
    <h1 class="nucleus-control-panel-heading">Page Settings</h1>
  }
  @using (Html.BeginAreaForm("Select", "Pages", "Admin", FormMethod.Post, new { @class = "overflow-auto flex-1", @data_target = Model.PageEditorMode != Nucleus.Web.ViewModels.Admin.PageEditor.PageEditorModes.Default ? ".nucleus-adminpage" : "#nucleus-page-editor", @autocomplete = "off" }))
  {
    <div class="position-absolute m-1 top-0 end-0">
      @if (Model.Page.Id != Guid.Empty)
      {
        <button class="btn btn-success nucleus-open-page" accesskey="O">Open Page</button>
      }
      @if (Model.PageEditorMode == Nucleus.Web.ViewModels.Admin.PageEditor.PageEditorModes.Default && Model.Page.Id != Guid.Empty)
      {
        <button disabled="@Model.Page.IsFirst" type="submit" accesskey="U" class="btn btn-secondary nucleus-material-icon@(Model.Page.IsFirst ? " disabled" : "")" data-target=".nucleus-adminpage" title="Move Page Up" formaction="@Url.AreaAction("MovePageUp", "Pages", "Admin", new { id = Model.Page.Id })">&#xe5d8;</button>
      }

      @if (Model.PageEditorMode == Nucleus.Web.ViewModels.Admin.PageEditor.PageEditorModes.Default && Model.Page.Id != Guid.Empty)
      {
        <button disabled="@Model.Page.IsLast" type="submit" accesskey="D" class="btn btn-secondary nucleus-material-icon@(Model.Page.IsLast ? " disabled" : "")" data-target=".nucleus-adminpage" title="Move Page Down" formaction="@Url.AreaAction("MovePageDown", "Pages" , "Admin" , new { id=Model.Page.Id })">&#xe5db;</button>
      }
    </div>

    <Tab>
      <TabItem active="true" target="#page-properties" caption="Properties"></TabItem>
      <TabItem target="#page-permissions" caption="Permissions"></TabItem>
      @if (Model.Page.Id != Guid.Empty)
      {
        <TabItem target="#page-modules" caption="Modules"></TabItem>
      }
    </Tab>

    <TabContent>
      <TabPanel id="page-properties" active="true">
        <fieldset role="group" aria-label="Basic Properties">

          @*<h2>Basic Properties</h2>*@
          @Html.HiddenFor(model => model.PageEditorMode)
          @Html.HiddenFor(model => model.Page.Id)
          @Html.HiddenFor(model => model.Page.SortOrder)

          <div class="nucleus-flex-fields">
            <SettingsControl caption="Page Name" helptext="Name of the page.  The page name is displayed in menus.">
              @Html.TextBoxFor(model => model.Page.Name, new { @class = "PageName", @maxlength = 256 })
            </SettingsControl>

            <SettingsControl caption="Page Title" helptext="Title of the page.  The page title is displayed in some browser page/tab captions, is displayed as the heading for search results, and is important for search engine optimisation.">
              @Html.TextBoxFor(model => model.Page.Title, new { @maxlength = 256 })
            </SettingsControl>
          </div>

          <SettingsControl name="@nameof(Model.Page.ParentId)" caption="Parent Page" helptext="The parent page for this page, used when rendering a menu.">
            @Html.PageListFor(model => model.Page.ParentId, Model.ParentPageMenu, Model.Page.Id)
          </SettingsControl>

          <SettingsControl caption="Description" helptext="Description of the page.  This is used to generate a meta-description for the page, which is good for search engine optimisation (SEO). Some search systems use the page description to generate result snippets. Some modules (like SiteMap) may display page descriptions on-screen.">
            @Html.TextAreaFor(model => model.Page.Description, new { @maxlength = 512 })
          </SettingsControl>

          <div class="nucleus-flex-fields">
            <SettingsControl caption="Link Type" class="flex-3" helptext="Select a link type.  Link type 'Normal' is standard link behavior, link type 'Url' will navigate to the specified Url, and link type 'Page' will navigate to the specified page in your site.">
              @Html.DropDownListFor(model => model.Page.LinkType, Html.GetEnumSelectList<Page.LinkTypes>(), new { @class = "page-link-type" })
            </SettingsControl>

            <div class="d-flex align-items-end flex-1 mt-auto">
              <SettingsControl caption="Page Disabled?" rendermode="LabelLast" class="inner-inline mt-auto" helptext="Specifies whether the page is available.  Disabled pages are not displayed in menus, and navigating to a disabled page will generate a '404: Not found' response.">
                @Html.CheckBoxFor(model => model.Page.Disabled, new { @class = "ToggleSwitch" })
              </SettingsControl>

              <SettingsControl caption="Include in Search?" rendermode="LabelLast" class="inner-inline mt-auto" helptext="Specifies whether the page is included in the search index, if search is enabled for your site.">
                @Html.CheckBoxFor(model => model.Page.IncludeInSearch, new { @class = "ToggleSwitch" })
              </SettingsControl>
            </div>
          </div>

          <SettingsControl caption="Link Url" class="page-link-url collapse@(Model.Page.LinkType == Page.LinkTypes.Url ? " show" : "")" helptext="Enter the Url that you want to navigate to when this page is selected.">
            @Html.TextBoxFor(model => model.Page.LinkUrl, new { @maxlength = 512 })
          </SettingsControl>

          <SettingsControl caption="Link Page" class="page-link-page collapse@(Model.Page.LinkType == Page.LinkTypes.Page ? " show" : "")" helptext="Select the page to link to.">
            @Html.PageListFor(model => model.Page.LinkPageId, Model.LinkPageMenu, Model.Page.Id)
          </SettingsControl>

          <SettingsControl caption="Link File" class="page-link-file collapse@(Model.Page.LinkType == Page.LinkTypes.File? " show" : "")" helptext="Select the file to display.">
            <div class="nucleus-flex-fields nucleus-fileselector">
              @await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { file = Model.SelectedLinkFile, PropertyName = "SelectedLinkFile", SelectAnotherActionName = "SelectAnotherLinkFile" })
            </div>
          </SettingsControl>
        </fieldset>

        <fieldset role="group" aria-labelledby="heading">
          <h2>Meta Data</h2>

          <SettingsControl caption="Keywords" helptext="Enter page keywords separated by commas.  Keywords may be used by a built-in search indexing service.  They are not used by search engines like Google search, and are not rendered within the page meta-data.">
            @Html.TextBoxFor(model => model.Page.Keywords, new { @maxlength = 512 })
          </SettingsControl>
        </fieldset>


        <fieldset role="group" aria-labelledby="heading">
          <h2>Layout</h2>

          <div class="nucleus-flex-fields">
            <SettingsControl caption="Page Layout" helptext="Select a page layout for this page, or select '(site default)' to use the default layout for this site.">
              <div class="d-flex gap-1">
                @Html.DropDownListFor(model => model.Page.LayoutDefinition.Id, new SelectList(Model.Layouts, "Id", "FriendlyName"), new { @class = "flex-1" })
                <button type="submit" formaction="@Url.AreaAction("LayoutSelector", "Pages", "Admin")" data-target="#page-layout-selector-dialog" class="btn btn-sm btn-outline-dark nucleus-material-icon" title="Layout selector.">&#xe66b;</button>
              </div>
            </SettingsControl>

            <SettingsControl caption="Default Container" helptext="Select a default container for modules on this page, or select '(site default)' to use the default layout for this site.">
              <div class="d-flex gap-1">
                @Html.DropDownListFor((model) => model.Page.DefaultContainerDefinition.Id, new SelectList(Model.PageContainers, "Id", "FriendlyName"), new { @class = "flex-1"})
                <button type="submit" formaction="@Url.AreaAction("ContainerSelector", "Pages", "Admin")" data-target="#page-container-selector-dialog" class="btn btn-sm btn-outline-dark nucleus-material-icon" title="Container selector.">&#xe162;</button>
              </div>
            </SettingsControl>
          </div>

          <div class="nucleus-flex-fields">
            <SettingsControl caption="Show in Menu?" rendermode="LabelLast" class="inner-inline" helptext="Specifies whether the page is displayed in menus.">
              @Html.CheckBoxFor(model => model.Page.ShowInMenu, new { @class = "ToggleSwitch" })
            </SettingsControl>

            <SettingsControl caption="Disable in Menu?" rendermode="LabelLast" class="inner-inline" helptext="If the page is being used as a placeholder (heading) in menus, and has no content, set 'Disable in menu' to prevent it from being clickable in menus.">
              @Html.CheckBoxFor(model => model.Page.DisableInMenu, new { @class = "ToggleSwitch" })
            </SettingsControl>
          </div>
        </fieldset>

        <fieldset role="group" aria-labelledby="heading" class="border-top pt-2 mt-2">
          <div class="d-flex">
            <h2 class="flex-grow-1 align-self-end">Page Routes</h2>
            <div class="nucleus-form-tools">
              @Html.SubmitButton("&#xe145;", "Add Path", Url.AreaAction("AddPageRoute", "Pages", "Admin"), new { @data_target = "form.parent()", @class = "btn btn-secondary", @accesskey = "A" })
            </div>
          </div>
          <table>
            <tr>
              <th>Path</th>
              <th class="ps-1">Type</th>
              <th class="text-center">Default</th>
              <th></th>
            </tr>
            @for (int urlCount = 0; urlCount < Model.Page.Routes.Count; urlCount++)
            {
              <tr>
                <td>
                  @Html.HiddenFor(model => model.Page.Routes[urlCount].Id)
                  @Html.TextBoxFor(model => model.Page.Routes[urlCount].Path, (@Model.Page.Routes[urlCount].Id == Guid.Empty ? new { @class = "DefaultPagePath", @maxlength = 256 } : null))
                </td>

                <td class="ps-1">@Html.DropDownListFor(model => model.Page.Routes[urlCount].Type, Html.GetEnumSelectList<PageRoute.PageRouteTypes>())</td>
                <td class="text-center">@Html.RadioButtonFor(model => model.Page.DefaultPageRouteId, @Model.Page.Routes[urlCount].Id)</td>
                <td class="nucleus-small-cell"><input type="submit" formaction="@Url.AreaAction("RemovePageRoute", "Pages", "Admin", new { id = Model.Page.Routes[urlCount].Id })" value="&#xe14c;" class="nucleus-material-icon btn btn-danger" title="Remove" data-target="form.parent()" /></td>
              </tr>
            }
          </table>
        </fieldset>

      </TabPanel>

      <TabPanel id="page-permissions">
        @await Html.PartialAsync("PagePermissionsEditor")
      </TabPanel>

      @if (Model.Page.Id != Guid.Empty)
      {
        <TabPanel id="page-modules">
          <fieldset role="group" aria-labelledby="heading">
            <h2>Modules on this page</h2>
            <div class="nucleus-form-tools">
              <button type="submit" formaction="@Url.AreaAction("AddModule", "Pages", "Admin")" data-target="#nucleus-popupdialog .modal-body" class="btn btn-secondary">Add Module</button>
            </div>
            <div id="pageeditor_pagemodules">
              @await Html.PartialAsync("_PageModules.cshtml", Model)
            </div>
          </fieldset>
        </TabPanel>
      }
    </TabContent>

    <Modal id="page-layout-selector-dialog" title="Layout Selector"></Modal>
    <Modal id="page-container-selector-dialog" title="Container Selector"></Modal>

    <div class="nucleus-button-panel">
      <button type="submit" class="btn btn-primary nucleus-dialogresult" data-target=".nucleus-adminpage" formaction="@Url.AreaAction("Save", "Pages", "Admin")">Save Changes</button>
      @if (Model.Page.Id != Guid.Empty && Model.CanDeletePage)
      {
        <button type="submit" class="btn btn-danger" data-target=".nucleus-adminpage" formaction="@Url.AreaAction("DeletePage", "Pages", "Admin")" data-confirm="Delete this page?">Delete Page</button>
      }
      @if (Model.Page.Id != Guid.Empty)
      {
        <button type="button" class="btn btn-secondary ms-auto dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
          Create Page Template
        </button>
        <ul class="dropdown-menu new-page-dropdown-menu">
          <li>
            <a href="@Url.AreaAction("CreateTemplateAndSave", "Pages", "Admin", new { pageId = @Model.Page.Id} )" class="dropdown-item d-flex" data-target="#nucleus-page-editor" accesskey="N">
              Save
            </a>
          </li>
          <li>
            <a href="@Url.AreaAction("CreateTemplateAndDownload", "Pages", "Admin", new { pageId = @Model.Page.Id} )" class="dropdown-item d-flex" data-target="#nucleus-page-editor" accesskey="N">
              Download
            </a>
          </li>
        </ul>
        @* @Html.LinkButton("", "Create Page Template", @Url.AreaAction("CreateTemplate", "Pages", "Admin") + "?pageId=" + @Model.Page.Id, new { @class = "btn btn-secondary ms-auto" })        *@
      }
    </div>
  }
</div>

<script>
  jQuery('#nucleus-control-panel-heading').html('Pages - ' + jQuery('.PageName').val());
  
  // add the current page Id to the "New Blank Page" button url so that Pages.Controller.NewPageBlank can use it to set the new page parent id.
  var newHref = new URL(jQuery('.new-page-blank').attr('href'), document.baseURI);
  newHref.search = '?sourcePageId=' + jQuery('#Page_Id').val();
  jQuery('.new-page-blank').attr('href',  newHref.toString());

  jQuery('.PageName').focus();  
  // when a new page is created (or copied, or created from a template), it will have no routes.  We want the user to enter the page name 
  if (@Model.Page.Routes.Count == 0)
  {
    jQuery('.PageName').select();
  }
  
  jQuery('.PageName').on('change', function ()
  {
    if (jQuery('.DefaultPagePath').val() === '')
    {
      jQuery('.DefaultPagePath').val(jQuery(this).val().replaceAll(" ", "-").toLowerCase());
    }

    if (jQuery('#Page_Title').val() === '')
    {
      jQuery('#Page_Title').val(jQuery(this).val());
    }

    jQuery('#nucleus-control-panel-heading').html('Pages - ' + jQuery(this).val());
  })

  jQuery('.page-link-type').on('change', function ()
  {
    var linkUrlControl = jQuery('.page-link-url');
    var linkPageControl = jQuery('.page-link-page');
    var linkFileControl = jQuery('.page-link-file');

    switch (jQuery('.page-link-type').val())
    {
      case '0': // normal
        linkUrlControl.removeClass('show');
        linkPageControl.removeClass('show');
        linkFileControl.removeClass('show');
        break;
      case '1': // url
        linkUrlControl.addClass('show');
        linkPageControl.removeClass('show');
        linkFileControl.removeClass('show');
        break;
      case '2': // page
        linkUrlControl.removeClass('show');
        linkPageControl.addClass('show');
        linkFileControl.removeClass('show');
        break;
      case '3': // file
        linkUrlControl.removeClass('show');
        linkPageControl.removeClass('show');
        linkFileControl.addClass('show');
        break;
    }
  });

  // functionality for the "open" button
  jQuery('.nucleus-open-page').on('click', function ()
  {
    window.parent.document.dispatchEvent(new CustomEvent('Open', { detail: { target: '@Url.PageLink(Model.Page)' } }));
  });

  // Read the child pages of the item containing the "+" button
  jQuery('#page-properties').on('click', '.nucleus-get-childpages', function (e)
  {
    // Add a ul to contain the new pages
    Page.LoadPartialContent(e, '@Url.AreaAction("GetChildPages", "Pages", "Admin")' + '?id=' + jQuery(this).attr('data-id'), jQuery(this).closest('li'));

    // remove the "+" button
    jQuery(this).remove();
  });

  // layout selector
  jQuery(document).on('click', '.select-layout', function (event) 
  { 
    var selectedLayoutId = jQuery(this).attr('data-layout-id');
    if (typeof selectedLayoutId !== 'undefined')
    {
      jQuery('#@Html.IdFor(model => model.Page.LayoutDefinition.Id)').val(selectedLayoutId);
    }
  });

  // container selector
  jQuery(document).on('click', '.select-container', function (event)
  {
    var selectedContainerId = jQuery(this).attr('data-container-id');
    if (typeof selectedContainerId  !== 'undefined')
    {
      jQuery('#@Html.IdFor(model => model.Page.DefaultContainerDefinition.Id)').val(selectedContainerId);
    }
  });
</script>
