@model Nucleus.Modules.Documents.ViewModels.Editor
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models.FileSystem
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@if (!String.IsNullOrEmpty(Model.UseLayout))
{
	this.Layout = Model.UseLayout;
}
@using (Html.BeginNucleusForm("Edit", "Documents", FormMethod.Post, new { @enctype = "multipart/form-data", @data_target = "#DocumentEditor" }))
{
	<Tab>
		<tabitem target="#page-properties" caption="Properties" active="true"></tabitem>
	</Tab>
	<TabContent>
		<TabPanel id="page-properties" active="true">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Basic Properties</h2>
				@Html.HiddenFor(model => model.SelectedDocument.Id)
				@Html.HiddenFor(model => model.SelectedDocument.SortOrder)
				@Html.HiddenFor(model => model.UseLayout)
				<SettingsControl caption="Title" helptext="Document title">
					@Html.TextBoxFor(model => model.SelectedDocument.Title, new { @maxlength = 256 })
				</SettingsControl>

				<SettingsControl caption="Description" helptext="Description of the document">
					@Html.TextAreaFor(model => model.SelectedDocument.Description, new { @maxlength = 512 })
				</SettingsControl>

				@if (Model.Categories != null)
				{
					<SettingsControl name="@nameof(Model.SelectedDocument.Category)" caption="Category" helptext="Document category">
						@Html.DropDownListFor(model => model.SelectedDocument.Category.Id, new SelectList(Model.Categories, "Id", "Name"), "(select)")
					</SettingsControl>
				}

				<SettingsControl caption="File" helptext="File">
					<div class="nucleus-flex-fields nucleus-fileselector">
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { file = Model.SelectedDocument.File, propertyName = "SelectedDocument.File" })
					</div>
					<div class="nucleus-flex-fields nucleus-fileselector mt-2">
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { folder = Model.SelectedDocument.File?.Parent })
					</div>
				</SettingsControl>
			</fieldset>
		</TabPanel>
	</TabContent>
	<div class="nucleus-button-panel">
		<input type="submit" class="btn btn-primary" value="Save Changes" formaction="@Url.NucleusAction("Save", "Documents", "Documents")" data-target="#DocumentEditor.parent()" />
		@if (Model.SelectedDocument != null && Model.SelectedDocument.Id != Guid.Empty)
		{
			<input type="submit" class="btn btn-danger" value="Delete Document" formaction="@Url.NucleusAction("Delete", "Documents", "Documents")" data-confirm="Delete this document?" data-target="#DocumentEditor.parent()" />
		}
    <button type="button" class="btn btn-secondary ms-auto" data-bs-dismiss="modal">Close</button>
	</div>
}