@model Nucleus.Modules.Forums.ViewModels.ViewForumPost
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.Extensions
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Modules.Forums.ViewModels
@Html.AddStyle("~!/../viewer.css")
@Html.AddStyle("~/Resources/css/forms.css")
<div class="Forums">
	@using (Html.BeginNucleusForm("SetForumPostStatus", "Forums", "Forums", FormMethod.Post, new { @autocomplete = "off", @data_target = "form.parent()" }))
	{
		<div class="nucleus-form-tools">
			@if (Model.CanReply && !Model.Post.IsLocked)
			{
				@Html.LinkButton("", "Reply", Url.NucleusAction("ReplyPost", "Forums", "Forums", new { id = Model.Post.Id }), new { @class = "btn btn-primary", @data_target = ".Forums.parent()" })
			}
			@if (Model.CanSubscribe && Model.Subscription == null)
			{
				@Html.SubmitButton("", "Subscribe", Url.NucleusAction("SubscribePost", "Forums", "Forums"), new { @class = "btn btn-outline-secondary", @data_target = ".Forums.parent()" })
			}
			@if (Model.Subscription != null)
			{
				@Html.SubmitButton("", "Un-subscribe", Url.NucleusAction("UnSubscribePost", "Forums", "Forums"), new { @class = "btn btn-outline-secondary", @data_target = ".Forums.parent()" })
			}
			@Html.LinkButton("", "Back", Url.PageLink(Model.Page, @Model.Forum.Name.FriendlyEncode()), new { @class="btn btn-secondary" })
		</div>

		<div class="post">
			@Html.HiddenFor(model => model.Forum.Id)
			@Html.HiddenFor(model => model.Post.Id)
			@Html.HiddenFor(model => model.Post.ForumId)
			<h3>@Model.Post.Subject</h3>
			<div class="post-author">
				<div>Posted on @Model.Post.DateAdded.FormatDate(this.Context.Request.GetUserTimeZone()) by @Model.Post.PostedBy.UserName</div>
			</div>
			<div class="post-flags">
				@if (Model.Post.IsLocked)
				{
					<span>Locked</span>
				}
				@if (Model.Post.IsPinned)
				{
					<span>Pinned</span>
				}
				@if (Model.Post.IsApproved)
				{
					<span>Approved</span>
				}
				else
				{
					@if (Model.Post.IsRejected == true)
					{
						<span>Rejected</span>
					}
					else
					{
						<span>Not Approved</span>
					}
				}
			</div>
			<div class="body">@Html.Raw(@Model.Post.Body)</div>

			<div class="attachments">
				@for (var attachmentCount = 0; attachmentCount < Model.Post.Attachments.Count; attachmentCount++)
				{
					<span>
						<a href="@Url.FileLink(Model.Post.Attachments[attachmentCount].File)" alt="@Model.Post.Attachments[attachmentCount].File.Name">
							@Model.Post.Attachments[attachmentCount].File.Name
						</a>
					</span>
				}
			</div>

			<div class="nucleus-form-tools">
				@if (Model.CanEditPost)
				{
					@Html.LinkButton("&#xe3c9;", "Edit", Url.NucleusAction("EditPost", "Forums", "Forums", new { id = Model.Post.Id }), new { @class = "btn btn-secondary", @data_target = ".Forums.parent()" })
				}
				@if (Model.CanDeletePost)
				{
					@Html.SubmitButton("", "Delete", Url.NucleusAction("DeleteForumPost", "Forums", "Forums"), new { @class = "btn btn-danger", @data_target = "form.parent()", @data_confirm = "Delete this post?" })
				}

				<div class="AdminTools">
					@if (Model.CanEditPost && Model.Forum.EffectiveSettings().StatusList != null)
					{
						@Html.DropDownListFor(model => model.Post.Status.Id, new SelectList(Model.Forum.EffectiveSettings().StatusList.Items, "Id", "Name"), new { @data_autopostbackevent = "change", @title= "Forum Post Status" })
					}
					@if (Model.CanApprovePost && !Model.Post.IsApproved)
					{
						@Html.SubmitButton("", "Approve", Url.NucleusAction("ApproveForumPost", "Forums", "Forums"), new { @class = "btn btn-success", @data_target = "form.parent()" })
					}
					@if (Model.CanApprovePost && !Model.Post.IsRejected == true)
					{
						@Html.SubmitButton("", "Reject", Url.NucleusAction("RejectForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = "form.parent()" })
					}
					@if (Model.CanLockPost && !Model.Post.IsLocked)
					{
						@Html.SubmitButton("", "Lock", Url.NucleusAction("LockForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = "form.parent()" })
					}
					@if (Model.CanLockPost && Model.Post.IsLocked)
					{
						@Html.SubmitButton("", "Unlock", Url.NucleusAction("UnlockForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = "form.parent()" })
					}
					@if (Model.CanPinPost && !Model.Post.IsPinned)
					{
						@Html.SubmitButton("", "Pin", Url.NucleusAction("PinForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = "form.parent()" })
					}
					@if (Model.CanPinPost && Model.Post.IsPinned)
					{
						@Html.SubmitButton("", "Un-pin", Url.NucleusAction("UnPinForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = "form.parent()" })
					}
				</div>
			</div>
		</div>

		@if (Model.Replies.Count > 0)
		{
			<div class="replies">
				<h3>Replies</h3>
				@foreach (var reply in Model.Replies)
				{
					<div class="reply">
						<div class="heading">
							<span>@reply.PostedBy.UserName replied on</span><span>@reply.DateAdded.FormatDate(this.Context.Request.GetUserTimeZone())</span>
							<span class="controls">
								@if (Model.CanApprovePost && !reply.IsApproved)
								{
									@Html.SubmitButton("", "Approve", Url.NucleusAction("ApproveForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()" })
								}
								@if (Model.CanApprovePost && !reply.IsRejected == true)
								{
									@Html.SubmitButton("", "Reject", Url.NucleusAction("RejectForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()", @class="btn btn-danger" })
								}
								@if (reply.CanDeleteReply && !Model.Post.IsLocked)
								{
									@Html.SubmitButton("&#xe14c;", "", Url.NucleusAction("DeleteForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()", @class="btn btn-danger", @data_confirm = "Delete this reply?" })
								}
								@if (reply.CanEditReply && !Model.Post.IsLocked)
								{
									@Html.LinkButton("&#xe3c9;", "", Url.NucleusAction("EditForumPostReply", "Forums", "Forums", new { postId = Model.Post.Id, replyId = reply.Id }), new { @data_target = "form.parent()" })
								}
							</span>
						</div>
						<div class="reply-flags">
							@if (reply.IsApproved)
							{
								<span>Approved</span>
							}
							else
							{
								@if (reply.IsRejected == true)
								{
									<span>Rejected</span>
								}
								else
								{
									<span>Not Approved</span>
								}
							}
						</div>
						<div class="body">
							@Html.Raw(reply.Body)
						</div>

						<div class="attachments">
							@for (var attachmentCount = 0; attachmentCount < reply.Attachments.Count; attachmentCount++)
							{
								<span>
									<a href="@Url.FileLink(reply.Attachments[attachmentCount].File)" alt="@reply.Attachments[attachmentCount].File.Name">
										@reply.Attachments[attachmentCount].File.Name
									</a>
								</span>
							}
						</div>
					</div>
				}
			</div>
		}
		else
		{
			<span>There are no replies to this post.</span>
		}
	}
</div>
