@model Nucleus.Modules.Search.ViewModels.Viewer
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Extensions
@using Nucleus.Modules.Search.ViewModels
@Html.AddStyle("~!/../viewer.css")
@using (Html.BeginNucleusForm("Suggest", "Search", FormMethod.Post, new { @data_target = "#search-suggestions", @role = "search" }))
{
<SettingsControl caption="Search Term" helptext="Enter your search term.">
	<div id="search-suggestions" aria-hidden="true"></div>
	@Html.TextBoxFor(model => model.SearchTerm, new { @class = "search-term", @data_autopostbackevent = "input", @autocomplete = "off" })
	@Html.SubmitButton("", "Search", @Url.NucleusAction("Index", "Search", "Search"), new { @data_target = "form.parent()" })
</SettingsControl>

	@if (Model.SearchResults != null)
	{
		<div>Search term: @Model.SearchTerm@Html.Raw(".")</div>
		@if (Model.SearchResults.Total == 0)
		{
			<div>No results.</div>
		}
		else
		{
			<div>Displaying search results @(((Model.PagingSettings.CurrentPageIndex - 1) * @Model.PagingSettings.PageSize) + 1) to @(Model.PagingSettings.CurrentPageIndex * @Model.PagingSettings.PageSize) of @Model.SearchResults.Total@Html.Raw(".")</div>
		}
	}

	@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.PagingControl), new { model = @Model.PagingSettings, propertyName = nameof(Model.PagingSettings) })

	@if (Model.SearchResults?.Results?.Any() == true)
	{
		@foreach (var result in Model.SearchResults.Results)
		{
			<div class="search-result">
				@if (Model.Settings.ShowUrl)
				{
					<span class="fst-italic small result-url">@Url.Content(result.Url)</span>
				}
				@if ((Model.Settings.ShowPublishDate || Model.Settings.ShowSize) && (result.PublishedDate.HasValue || result.Size.HasValue))
				{
					<div class="text-muted small fst-italic result-meta">
						@if (Model.Settings.ShowPublishDate && result.PublishedDate.HasValue)
						{
							<span>Published: @result.PublishedDate.FormatDate(true)</span>
						}
						@if ((Model.Settings.ShowPublishDate && result.PublishedDate.HasValue) && (Model.Settings.ShowSize && result.Size.HasValue))
						{
							@Html.Raw(", ")
						}
						@if (Model.Settings.ShowSize && result.Size.HasValue)
						{
							<span>@result.Size.FormatFileSize()</span>
						}
					</div>
				}

				<a class="d-block result-link" href="@Url.Content(result.Url)" title="@result.Title">@result.Title</a>

				@if (!String.IsNullOrEmpty(@result.Summary))
				{
					<div class="result-summary">@result.Summary</div>
				}
				@if (Model.Settings.ShowCategories && result.Categories != null && result.Categories.Any())
				{
					<ul class="list-inline comma-separated result-categories">
						@foreach (var category in result.Categories)
						{
							<li class="list-inline-item">@category.Name</li>
						}
					</ul>
				}
				@if (Model.Settings.ShowScore)
				{
					<span class="fw-light d-block small result-score">Score: @result.Score</span>
				}
			</div>
		}
	}
}

<script type="text/javascript">
	jQuery(document).ready(function ()
	{
		jQuery(document).off('click.suggestion');
		jQuery(document).on('click.suggestion', '.suggestions-result li', function (event)
		{
			var textbox = jQuery(event.currentTarget).parents('div').siblings('.search-term');
			var button = jQuery(event.currentTarget).parents('div').siblings('button');
			var selectedText = jQuery(event.currentTarget).html();

			textbox.val(selectedText);
			button.click();
		});
	});
</script>
