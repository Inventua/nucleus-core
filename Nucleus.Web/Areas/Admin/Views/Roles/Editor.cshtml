@model Nucleus.Web.ViewModels.Admin.RoleEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
<Tab>
	<TabItem active="true" target="#role-properties" caption="Properties"></TabItem>
	@if (Model.Role.Id != Guid.Empty && !Model.Role.Type.HasFlag(Role.RoleType.Restricted))
	{
		<TabItem target="#role-users" caption="Users"></TabItem>
	}
</Tab>

<TabContent>
	<TabPanel id="role-properties" active="true">

		@using (Html.BeginAreaForm("Save", "Roles", "Admin", FormMethod.Post, new { @data_target = ".nucleus-adminpage", @autocomplete = "off" }))
		{
			<fieldset role="group" aria-labelledby="heading">
				<h2>Role</h2>
				@Html.HiddenFor(model => model.Role.Id)

				<SettingsControl caption="Name" helptext="Role name.  This value is displayed in on-screen controls which refer to roles.">
					@Html.TextBoxFor(model => model.Role.Name, (Model.Role.Type.HasFlag(Role.RoleType.System) ? new { @disabled = "", @maxlength = 256 } : new { @maxlength = 256 }))
				</SettingsControl>

				<SettingsControl caption="Description" helptext="The role description is for your reference in the control panel pages.">
					@Html.TextAreaFor(model => model.Role.Description, (Model.Role.Type.HasFlag(Role.RoleType.System) ? new { @disabled = "", @maxlength = 512 } : new { @maxlength = 512 }))
				</SettingsControl>

				@if (!Model.Role.Type.HasFlag(Role.RoleType.System))
				{
					<SettingsControl caption="Auto Role?" rendermode="LabelLast" class="inner-inline" helptext="Specifies whether the role is automatically assigned to new users.">
						@Html.CheckBoxFor(model => model.IsAutoRole, new { @class = "ToggleSwitch" })
					</SettingsControl>
				}

				<SettingsControl caption="Role Group" helptext="Role groups are used to group together in drop-down lists.">
					@if (!Model.Role.Type.HasFlag(Role.RoleType.System))
					{
						@Html.DropDownListFor(model => model.Role.RoleGroup.Id, new SelectList(Model.RoleGroups, "Id", "Name"), "(none selected)")
					}
					else
					{
						<div>System</div>
					}

				</SettingsControl>
			</fieldset>

			@if (!Model.Role.Type.HasFlag(Role.RoleType.System))
			{
				<div class="nucleus-button-panel">
					<input type="submit" class="btn btn-primary" value="Save Changes" />

					@if (Model.Role.Id != Guid.Empty)
					{
						var prompt = "";
						if (Model.Users.Items.Any())
						{
							prompt = "This role has one or more users assigned. Deleting this role will automatically remove any user-role assignments and permissions which apply to the role.\n\nDo you want to delete this role?";
						}
						else
						{
							prompt = "This role has no users assigned. Deleting this role will automatically remove any permissions which apply to the role.\n\nDo you want to delete this role?";
						}

						<input type="submit" class="btn btn-danger" value="Delete Role" formaction="@Url.AreaAction("DeleteRole", "Roles", "Admin")" data-confirm="@prompt" data-confirm-title="Delete Role" />
					}
				</div>
			}
			
			@if (Model.Role.Type.HasFlag(Role.RoleType.System) || Model.Role.Type.HasFlag(Role.RoleType.Restricted))
			{
				<div class="alert alert-warning">
					@if (Model.Role.Type.HasFlag(Role.RoleType.System))
					{
						<div>This is a system role.  You can't change any settings for this role.</div>
					}

					@if (Model.Role.Type.HasFlag(Role.RoleType.Restricted))
					{
						<div>This is a restricted role.  You can't add or remove users from this role.</div>
					}
				</div>
			}			
		}
	</TabPanel>

	@if (Model.Role.Id != Guid.Empty && !Model.Role.Type.HasFlag(Role.RoleType.Restricted))
	{
		<TabPanel id="role-users">
			@if (Model.Users?.Items?.Any() == true)
			{
				<div class="nucleus-role-users">
					@await Html.PartialAsync("_UsersList", Model)
				</div>
			}
			else
			{
				<div class="alert alert-info">
					There are no users in this role.
				</div>
			}
		</TabPanel>
	}
</TabContent>
