@model Nucleus.Web.ViewModels.Admin.PageModuleCommonSettingsEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@if (!String.IsNullOrEmpty(Model.UseLayout))
{
  Layout = Model.UseLayout;
}
@using (Html.BeginAreaForm("RefreshContainerStyles", "Pages", "Admin", FormMethod.Post, new { @class = "d-flex overflow-auto flex-1", @data_target = "form.parent()", @autocomplete = "off" }))
{
  @Html.HiddenFor(model => model.Module.PageId)
  @Html.HiddenFor(model => model.PageEditorMode)

  <Tab>
    <TabItem target="#module-properties" active="true" caption="Properties"></TabItem>
    <TabItem target="#module-styles" caption="Container Styles"></TabItem>
    <TabItem target="#module-permissions" caption="Permissions"></TabItem>
  </Tab>

  <TabContent>
    <TabPanel id="module-properties" active="true">

      <fieldset role="group" aria-label="Properties" class="flex-grow-0">
        @Html.HiddenFor((model) => model.Module.Id)
        @Html.HiddenFor((model) => model.Module.SortOrder)
        <SettingsControl caption="Module Type" helptext="Select a Module Type.">
          @if (Model.Module.Id == Guid.Empty)
          {
            @Html.DropDownListFor(model => model.Module.ModuleDefinition.Id, Model.AvailableModules, "(select module type)")
          }
          else
          {
            @Html.HiddenFor((model) => model.Module.ModuleDefinition.Id)
            <div class="d-flex align-items-center column-gap-2">
              @Model.Module.ModuleDefinition.FriendlyName
              @if (!String.IsNullOrEmpty(@Model.Module.ModuleDefinition.HelpUrl))
              {
                <a class="btn btn-none nucleus-material-icon" href="@Model.Module.ModuleDefinition.HelpUrl" target="_blank">&#xe887;</a>
              }
            </div>
            
          }
        </SettingsControl>

        <SettingsControl caption="Title" helptext="Module Title.  This value may be shown on screen.">
          @Html.TextBoxFor((model) => model.Module.Title, new { @maxlength = 256 })
        </SettingsControl>

        <div class="nucleus-flex-fields">
          <SettingsControl caption="Pane" helptext="Select the pane to display this module in.  Different layouts have different available panes and pane names.">
            @Html.DropDownListFor(model => model.Module.Pane, new SelectList(Model.AvailablePanes))
          </SettingsControl>
          <SettingsControl caption="Container" helptext="Select the container for the module, or select '(page default)' to use the default layout for this page.">
            <div class="d-flex column-gap-1">
              @Html.DropDownListFor(model => model.Module.ContainerDefinition.Id, new SelectList(Model.ModuleContainers, "Id", "FriendlyName"), new { @class = "flex-1 my-auto", @data_autopostbackevent = "change", @data_target = ".container-styles" })
              <button type="submit" formaction="@Url.AreaAction("ModuleContainerSelector", "Pages", "Admin")" data-target="#module-container-selector-dialog" class="btn btn-sm btn-outline-dark my-auto nucleus-material-icon" title="Container selector.">&#xe162;</button>
            </div>
          </SettingsControl>
        </div>
      </fieldset>
    </TabPanel>
    <TabPanel id="module-styles">
      <fieldset aria-label="Container Styles">
        <div class="container-styles">
          @await Html.PartialAsync("_ContainerStyles")
        </div>

        <SettingsControl caption="Other Css Classes" class="mt-2" helptext="Applies additional CSS classes to the container.  Separate additional CSS classes with spaces.">
          @Html.TextBoxFor(model => model.Module.Style)
        </SettingsControl>

      </fieldset>
    </TabPanel>
    <TabPanel id="module-permissions">
      <fieldset role="group" aria-label="Module Permissions" class="d-flex overflow-auto flex-1 p-1">
        <div class="nucleus-form-tools">
          @Html.DropDownListFor(model => model.SelectedModuleRoleId, Model.AvailableModuleRoles, new { @class = "flex-fill" })
          <input type="submit" formaction="@Url.AreaAction("AddModulePermissionRole", "Pages", "Admin")?PageEditorMode=@Model.PageEditorMode" value="Add Role" data-target="form.parent()" class="btn btn-secondary" />
        </div>
        @await Html.PartialAsync("ModulePermissions")
      </fieldset>
    </TabPanel>
  </TabContent>

  <div class="nucleus-form-buttonrow">
    <button type="submit" formaction="@Url.AreaAction("SaveModuleCommonSettings", "Pages", "Admin")" data-target="#pageeditor_pagemodules" class="btn btn-primary">
      @if (Model.Module.Id == Guid.Empty)
      {
        <text>Add Module</text>
      }
      else
      {
        <text>Save Changes</text>
      }
    </button>
  </div>
}
<Modal id="module-container-selector-dialog" title="Container Selector"></Modal>
<script>

  // container selector
  jQuery(document).on('click', '.select-container', function (event)
  {
    var selectedContainerId = jQuery(this).attr('data-container-id');
    if (typeof selectedContainerId !== 'undefined')
    {
      jQuery('#@Html.IdFor(model => model.Module.ContainerDefinition.Id)').val(selectedContainerId);
    }
  });

  jQuery(document).on("change", '.container-style-selector[data-type="<color>"]', function (event)
  {
    var element = jQuery(this);
    var selectedOption = element.find('option:selected');
    var customIsSelected = selectedOption.attr('data-name') === '--__custom';

    switch (element.attr('data-type'))
    {
      case '<color>':
        if (customIsSelected)
        {
          element.siblings('.container-style-colorselector').addClass('show');
        }
        else
        {
          element.siblings('.container-style-colorselector').removeClass('show');
        }
        break;
    }
  });
</script>