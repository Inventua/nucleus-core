@model Nucleus.Modules.Forums.ViewModels.ViewForum
@using Nucleus.Extensions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Modules.Forums.ViewModels
@Html.AddStyle("~!/../viewer.css")
@Html.AddStyle("~/Resources/css/forms.css")
@if (Model.Forum != null)
{
	<h2>@Model.Forum.Name</h2>
	<div class="Forums">
		@using (Html.BeginNucleusForm("SubscribeForum", "Forums", "Forums", FormMethod.Post, new { @autocomplete = "off" }))
		{
			<div class="nucleus-form-tools">
				@Html.HiddenFor(model => model.Forum.Id)
				@if (Model.CanPost)
				{
					@Html.LinkButton("", "Add new post", Url.NucleusAction("AddPost", "Forums", "Forums", new { forumId = Model.Forum.Id }), new { @class = "btn btn-primary", @data_target = ".Forums.parent()" })
				}
				@if (Model.CanSubscribe && Model.Subscription == null)
				{
					@Html.SubmitButton("", "Subscribe", Url.NucleusAction("SubscribeForum", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = ".Forums.parent()" })
				}
				@if (Model.Subscription != null)
				{
					@Html.SubmitButton("", "Un-subscribe", Url.NucleusAction("UnSubscribeForum", "Forums", "Forums"), new { @class = "btn btn-secondary", @data_target = ".Forums.parent()" })
				}
				@Html.LinkButton("", "Back", Url.PageLink(Model.Page), new { @class="btn btn-secondary" })
			</div>
		}
		@if (Model.Posts != null)
		{
			@using (Html.BeginNucleusForm("ViewForum", "Forums", "Forums", FormMethod.Post, new { @autocomplete = "off", @data_target = ".Forums.parent()" }))
			{
				@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.PagingControl), new { model = @Model.Posts, propertyName = "Posts", renderMode = Nucleus.ViewFeatures.ViewModels.PagingControl.RenderModes.Standard })
				@Html.HiddenFor(model => model.Forum.Id)
			}
			<table class="forum-posts">
				<tr>
					<th colspan="1" class="forum-title">Subject</th>
					<th class="forum-author">Started By</th>
					<th>Replies</th>
					<th>Most Recent</th>
				</tr>
				@foreach (var post in Model.Posts.Items)
				{
					<tr>
						<td class="forum-title">
							<a href="@Url.PageLink(Model.Page, @Model.Forum.Name.FriendlyEncode() + $"/{@post.Id}")" class="@(post.Tracking == null ? "d-block fw-bold" : "d-block")">
								<span class="nucleus-material-icon">
									@if (post.IsPinned)
									{
										<span title="Pinned">@Html.Raw("&#xe55f;")</span>
									}
									else if (post.IsLocked)
									{
										<span title="Pinned">@Html.Raw("&#xe897;")</span>
									}
									else if (post.IsRejected == true)
									{
										<span title="Rejected">@Html.Raw("&#xe8db;")</span>
									}
									else if (!post.IsApproved)
									{
										<span title="Awaiting Approval">@Html.Raw("&#xef64;")</span>
									}

								</span>
								@post.Subject
							</a>

							@if (post.Status != null)
							{
								<span class="post-status">@post.Status.Name</span>
							}
						</td>
						<td class="forum-author compact-cell">@post.PostedBy.UserName</td>
						<td class="compact-cell">@post.Statistics.ReplyCount</td>
						<td class="compact-cell">
							@if (post.Statistics.LastReply != null)
							{
								<div>@post.Statistics.LastReply.PostedBy.UserName</div>
								<div>@post.Statistics.LastReply.DateAdded.FormatDate(this.Context.Request.GetUserTimeZone())</div>
							}
					</td>
				</tr>
			}
		</table>
		}
	</div>
}