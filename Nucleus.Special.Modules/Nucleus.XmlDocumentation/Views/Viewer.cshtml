@model Nucleus.XmlDocumentation.ViewModels.Viewer
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.XmlDocumentation.ViewModels
@using Nucleus.XmlDocumentation;

@Html.AddStyle("~!/../viewer.css")
<div class="XmlDocumentation">
  @if (!String.IsNullOrEmpty(Model.Message))
  {
    <div class="alert alert-warning" role="alert">@Model.Message</div>
  }
  else
  {
    <div class="api-wrapper">
      @if (Model.ShowMenu)
      {
        <div class="api-menu" data-track-scroll="content-wrapper">
          <nav class="accordion">
            <div class="accordion-item">
              @foreach (var document in Model.Documents)
              {
                <h2 id="hdr_@document.Namespace.MenuId()" class="accordion-header">
                  <button class="accordion-button@(Model.DefaultOpen || Model.SelectedDocument==document ? "": " collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#@document.Namespace.MenuId()" aria-expanded="@(Model.DefaultOpen || Model.SelectedDocument==document ? "true": "false")" aria-controls="@document.Namespace.MenuId()">
                    @document.AssemblyName
                  </button>
                </h2>

                <div id="@document.Namespace.MenuId()" class="list-group accordion-collapse collapse @(Model.DefaultOpen || Model.SelectedDocument==document ? "show" : "")">
                  <a class="list-group-item assembly-landing" href="@Url.Content("~" + @document.GenerateUrl(Model.Page))">@document.AssemblyName Assembly</a>

                  <ul>
                    @foreach (var apiClass in document.Classes)
                    {
                      <li><a id="@apiClass.MenuId()" class="list-group-item @(apiClass.FullName==Model.SelectedClass?.FullName ? "active" : "")" href="@Url.Content("~" + @apiClass.GenerateUrl(Model.Page, document))" )" title="@apiClass.Name">@apiClass.Name</a></li>
                    }
                  </ul>
                </div>
              }
            </div>
          </nav>
        </div>
      }

      <div class="api-content" data-track-scroll="content-wrapper">
        @if (Model.SelectedDocument == null)
        {
          // no document selected, show "landing" page
          if (!String.IsNullOrEmpty(Model.WelcomeMessage.Value))
          {
            @Model.WelcomeMessage
          }
          foreach (var document in Model.Documents)
          {
            <h2 class="is-page-link"><a href="@Url.PageLink(Model.Page, @document.SourceFile.Name)">@document.Namespace.Name Assembly</a></h2>
            if (document.Namespace.Summary != null)
            {
              <div class="api-remarks">
                @await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent(Model.Page, document.Namespace.Summary))
              </div>
            }
          }
        }
        else
        {
          if (Model.SelectedClass != null)
          {
            // Class page
            @await Html.PartialAsync("_RenderClass.cshtml", new ApiClass(Model.Page, Model.SelectedClass))
          }
          else if (Model.SelectedDocument != null)
          {
            // Assembly contents page
            <h2>@Model.SelectedDocument.Namespace.Name</h2>
            @if (Model.SelectedDocument.Namespace.Summary != null)
            {
              <div class="api-summary">
                @await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent(Model.Page, Model.SelectedDocument.Namespace.Summary))
              </div>
            }
            @if (Model.SelectedDocument.Namespace.Remarks != null)
            {
              <div class="api-remarks">
                <h3>Remarks</h3>
                <div>
                  @await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent(Model.Page, Model.SelectedDocument.Namespace.Remarks))
                </div>
              </div>
            }
            @if (Model.SelectedDocument.Namespace.Examples != null)
            {
              <div class="api-examples">
                <h3>Examples</h3>
                @foreach (var example in Model.SelectedDocument.Namespace.Examples)
                {
                  <code>@example</code>
                }
              </div>
            }

            <nav>
              @if (Model.SelectedDocument.Classes.Any(item => item.Type == Nucleus.XmlDocumentation.Models.ApiMember.MemberTypes.Class))
              {
                <h2 class="is-page-link">Classes</h2>
                <ul class="list-group">
                  @foreach (var apiClass in Model.SelectedDocument.Classes.Where(item => item.Type == Nucleus.XmlDocumentation.Models.ApiMember.MemberTypes.Class).OrderBy(item => item.Name))
                  {
                    <li class="list-group-item">
                      <h3>
                        <a class="list-group-item-action" href="@Url.PageLink(Model.Page, $"{Model.SelectedDocument.SourceFile.Name}/{apiClass.ControlId()}/")">@apiClass.Name</a>
                      </h3>

                      <div>
                        @await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent(Model.Page, apiClass.Summary))
                      </div>
                    </li>
                  }
                </ul>
              }

              @if (Model.SelectedDocument.Classes.Any(item => item.Type == Nucleus.XmlDocumentation.Models.ApiMember.MemberTypes.Interface))
              {
                <h2 class="is-page-link">Interfaces</h2>
                <ul class="list-group">
                  @foreach (var apiClass in Model.SelectedDocument.Classes.Where(item => item.Type == Nucleus.XmlDocumentation.Models.ApiMember.MemberTypes.Interface).OrderBy(item => item.Name))
                  {
                    <li class="list-group-item">
                      <h3>
                        <a class="list-group-item-action" href="@Url.PageLink(Model.Page, $"{Model.SelectedDocument.SourceFile.Name}/{apiClass.ControlId()}/")">@apiClass.Name</a>
                      </h3>

                      <div>
                        @await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent(Model.Page, apiClass.Summary))
                      </div>
                    </li>
                  }
                </ul>
              }
            </nav>
          }
        }

      </div>

    </div>
  }
</div>

<script>
  jQuery(document).ready(function ()
  {
    // In the menu, scroll the currently-selected item into view
    var selectedClassMenuId = '@Model.SelectedClass?.MenuId()';

    if (selectedClassMenuId !== '')
    {
      var menuItem = jQuery('#' + selectedClassMenuId).first();
      if (menuItem.length !== 0)
      {
        menuItem[0].scrollIntoView({ block: "center", inline: "nearest" });
      }
    }

    // Automatically load the assembly landing page when an accordion item is expanded
    jQuery('.list-group.accordion-collapse').on('show.bs.collapse', function ()
    {
      var href = jQuery(this).children('.assembly-landing').first().attr('href');
      document.location = href;
      return false;
    });

    Page.AttachCopyButton('.XmlDocumentation code');
  });
</script>