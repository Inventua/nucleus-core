@model Nucleus.Web.ViewModels.Admin.FileSystem
@using Nucleus.Abstractions.Models.FileSystem
@using Nucleus.ViewFeatures
@using Nucleus.Extensions;
@using Nucleus.Abstractions.FileSystemProviders
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
<div class="FileSystemManager">
	<h2 class="nucleus-control-panel-heading">Files</h2>

	@using (Html.BeginAreaForm("Navigate", "FileSystem", "Admin", FormMethod.Post, new { @class = "d-flex flex-column overflow-auto", @data_target = ".nucleus-adminpage", @enctype = "multipart/form-data" }))
	{
		<div class="nucleus-form-buttonrow">
			<RemoveWhiteSpace>
			@Html.DropDownListFor(model => model.SelectedProviderKey, new SelectList(Model.Providers, nameof(FileSystemProviderInfo.Key), nameof(FileSystemProviderInfo.Name)), "(select)", new { @class = "providerKey nucleus-default-control ms-1 nucleus-show-progress nucleus-show-progress-after" })
			<span class="align-self-center ms-1 mt-1">
				@foreach (var ancestor in Model.Ancestors)				
				{
					@if (ancestor.Name != "/")
					{
						<text>&nbsp;/&nbsp;</text>
						@Html.AreaActionLink(ancestor.Name, "Index", "FileSystem", "Admin", new { folderId = ancestor.Id }, new { @class = "NavigateLink nucleus-show-progress nucleus-show-progress-after", @data_target = ".nucleus-adminpage" })
					}	
					else
					{
						<button title="Top level" href="@Url.AreaAction("Index", "FileSystem", "Admin", new { folderId = ancestor.Id })" class="btn btn-sm btn-outline-primary me-1 NavigateLink nucleus-show-progress nucleus-show-progress-after nucleus-material-icon" data-target=".nucleus-adminpage">
							&#xe2c7;
						</button>						
					}
				}
			</span>
			</RemoveWhiteSpace>
		</div>
		@Html.HiddenFor(model => model.SelectedProviderKey)
		@Html.HiddenFor(model => model.Folder.Id)

		<div class="nucleus-form-toolbar">
			@if (!String.IsNullOrEmpty(Model.Folder.Path))
			{
				@Html.LinkButton("&#xe5c4;", "Back", @Url.AreaAction("Index", "FileSystem", "Admin", new { folderId = Model.Folder.Parent.Id }), new { @data_target = ".nucleus-adminpage", @class = "btn btn-secondary btn-sm nucleus-show-progress nucleus-show-progress-inside" })
			}
			@if (Model.Folder.Capabilities.CanHaveFolders)
			{
				@Html.AreaActionLink("Create Folder", "ShowCreateFolderDialog", "FileSystem", "Admin", new { folderId = Model.Folder.Id }, new { @class = "btn btn-secondary btn-sm", @data_target = "#nucleus-popupdialog .modal-body" })
			}
			@if (Model.Folder.Capabilities.CanStoreFiles)
			{
				<div class="btn-group" role="group">
					<button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
						<span class="nucleus-material-icon">&#xe2c6;</span> Upload
					</button>
					<ul class="dropdown-menu">
						<li>
							<label class="dropdown-item">
								Selected Files ...
								<input type="file" name="mediaFile" class="collapse" multiple="multiple" formaction="@Url.AreaAction("UploadFile", "FileSystem", "Admin")">
							</label>
						</li>
						<li>
							<label class="dropdown-item">
								Upload and un-zip ZIP archive ...
								<input type="file" name="archiveFile" accept="application/zip" class="collapse" formaction="@Url.AreaAction("UploadArchive", "FileSystem", "Admin")">
							</label>
						</li>
					</ul>
				</div>
			}
			else
			{
				<button type="button" class="btn btn-secondary btn-sm" aria-disabled="true" disabled>Upload File</button>
			}

			@Html.SubmitButton("", "Download", @Url.AreaAction("Download", "FileSystem", "Admin"), new { @class = "btn btn-primary btn-sm", @data_target = "window" })

			@if (Model.EnableDelete)
			{
				@Html.SubmitButton("", "Delete", @Url.AreaAction("ShowDeleteDialog", "FileSystem", "Admin"), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-danger btn-sm" })
			}
			@if (Model.EnableRename)
			{
				@Html.SubmitButton("", "Rename", @Url.AreaAction("ShowRenameDialog", "FileSystem", "Admin"), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-secondary btn-sm" })
			}
			@Html.SubmitButton("&#xe897;", "Folder Settings", @Url.AreaAction("EditFolderSettings", "FileSystem", "Admin", new { folderId = Model.Folder.Id }), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-secondary btn-sm" })
		</div>

		<Progress caption="Uploading file ..." class="UploadProgress"></Progress>

		@if (Model.Folder?.Permissions?.Any() != true)
		{
			<div class="alert alert-warning">This folder does not have any permissions set.  Click Folder Settings to create permissions, unless the files in this folder are for system use only.</div>
		}
		@if (!Model.Folder?.Folders.Any() == true && !Model.Folder?.Files.Any() == true)
		{
			<div class="alert alert-warning">This folder is empty</div>
		}
		else
		{
			<div class="overflow-auto">
				<table class="FileSystemItems table table-sm">
					<tr>
						<th>Name</th>
						<th class="file-type">Type</th>
						<th class="file-modified-date">Modified Date</th>
						<th class="file-size">Size</th>
						<th class="file-dimensions">Dimensions</th>
					</tr>

					@for (var folderCount = 0; folderCount < Model.Folder?.Folders.Count; folderCount++)
					{
						<tr>
							<td>
								<label>
								@if (Model.Folder.Folders[folderCount].Capabilities.CanRename || Model.Folder.Folders[folderCount].Capabilities.CanDelete)
								{
									@Html.CheckBoxFor(model => model.Folder.Folders[folderCount].IsSelected, new { @class = "nucleus-filesystem-folderselector" })
								}
								@Html.HiddenFor(model => model.Folder.Folders[folderCount].Id)
								@Html.AreaActionLink(Model.Folder.Folders[folderCount].Name, "Index", "FileSystem", "Admin", new { folderId = @Model.Folder.Folders[folderCount].Id }, new { @class = "NavigateLink nucleus-show-progress nucleus-show-progress-after", @data_target = ".nucleus-adminpage" })
								</label>
							</td>
							<td>Folder</td>
							<td>@Model.Folder.Folders[folderCount].DateModified.FormatDate(this.Context.Request.GetUserTimeZone())</td>
							<td />
							<td />
						</tr>
					}

					@for (var fileCount = 0; fileCount < Model.Folder?.Files.Count; fileCount++)
					{
						var isRecent = Math.Abs(Model.Folder.Files[fileCount].DateModified.Subtract(DateTime.UtcNow).TotalMinutes) < 5;
						<tr>
							<td class="@(isRecent ? "fw-bold" : "")">
								<label>
								@Html.CheckBoxFor(model => Model.Folder.Files[fileCount].IsSelected, new { @class = "nucleus-filesystem-fileselector" })							
								@Model.Folder.Files[fileCount].Name
								@Html.HiddenFor(model => Model.Folder.Files[fileCount].Id)
								</label>
							</td>
							<td>File</td>
							<td class="Date@(isRecent ? " fw-bold" : "")">@Model.Folder.Files[fileCount].DateModified.FormatDate(this.Context.Request.GetUserTimeZone())</td>
							<td>@Model.Folder.Files[fileCount].Size.FormatFileSize()</td>
							<td>
								@if (Model.Folder.Files[fileCount].Width > 0 && Model.Folder.Files[fileCount].Height > 0)
								{
									@($"{Model.Folder.Files[fileCount].Width} x {Model.Folder.Files[fileCount].Height}")
								}
							</td>
						</tr>
					}
				</table>
			</div>

		}

	}
</div>

<script>
	jQuery('.providerKey').on('change', function (event)
	{
			var newEvent = jQuery.Event('submit', { originalEvent: event });
			jQuery(this).parents('form').first().trigger(newEvent);

			//jQuery(this).parents('form').submit();
	});

</script>
