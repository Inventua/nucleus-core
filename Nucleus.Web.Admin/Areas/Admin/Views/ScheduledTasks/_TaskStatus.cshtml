@model Nucleus.Web.ViewModels.Admin.ScheduledTaskEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@using Nucleus.Abstractions.Models.TaskScheduler
@using Nucleus.Extensions
@switch (Model.Progress.Status)
{
  case ScheduledTaskProgress.State.Running:
    <div class="alert alert-primary mt-3" role="alert">
      <div class="spinner-border spinner-border-sm text-success nucleus-progress-spinner me-2" role="status"></div>
      This task is running now, started @((DateTime.UtcNow - Model.StartTime).FormatTimeSpan()) ago@(@Model.Progress.Percent > 0 ? $", {Model.Progress.Percent}% complete" : "").
    </div>
    break;

  case ScheduledTaskProgress.State.Error:
    <div class="alert alert-info mt-3" role="alert">
      This task failed with an error at @(Model.LatestHistory == null ? "Unknown" : (Model.LatestHistory.FinishDate.HasValue ? Model.LatestHistory.FinishDate.FormatDate(this.Context.Request.GetUserTimeZone(), true) : "Unknown"))
      and is scheduled to run @(Model.LatestHistory == null ? "immediately" : (Model.LatestHistory.NextScheduledRun.HasValue ? "next at " + Model.LatestHistory.NextScheduledRun.FormatDate(this.Context.Request.GetUserTimeZone(), true) : "immediately")).
      Check the logs to view error details.
    </div>
    break;

  case ScheduledTaskProgress.State.Succeeded:
    <div class="alert alert-success mt-3" role="alert">
      This task completed successfully at @(Model.LatestHistory == null ? "Unknown" : (Model.LatestHistory.FinishDate.HasValue ? Model.LatestHistory.FinishDate.FormatDate(this.Context.Request.GetUserTimeZone(), true) : "Unknown"))
      and is scheduled to run @(Model.LatestHistory == null ? "immediately" : Model.ScheduledTask.IntervalType == ScheduledTask.Intervals.Startup ? "after the next restart" : (Model.LatestHistory.NextScheduledRun.HasValue ? "next at " + Model.LatestHistory.NextScheduledRun.FormatDate(this.Context.Request.GetUserTimeZone(), true) : "immediately")).
    </div>
    break;

  default:
    @if (Model.ScheduledTask.Id != Guid.Empty)
    {
      <div class="nucleus-flex-fields d-inline-flex column-gap-5">
        <SettingsControl caption="Last Started">
          <div>@(Model.LatestHistory == null ? "Never" : Model.LatestHistory.StartDate.FormatDate(this.Context.Request.GetUserTimeZone(), true))</div>
        </SettingsControl>
        @if (Model.LatestHistory != null && Model.LatestHistory.FinishDate.HasValue)
        {
          <SettingsControl caption="Finished at">
            <div>@Model.LatestHistory.FinishDate.FormatDate(this.Context.Request.GetUserTimeZone(), true)</div>
          </SettingsControl>
        }
      </div>
      <SettingsControl caption="Next Run">
        @if (Model.ScheduledTask.IntervalType == ScheduledTask.Intervals.None)
        {
          <div>Never</div>
        }
        else
        {
          <div>@(Model.LatestHistory == null ? "Immediate" : Model.ScheduledTask.IntervalType == ScheduledTask.Intervals.Startup ? "After the next restart" : (Model.LatestHistory.NextScheduledRun.HasValue ? Model.LatestHistory.NextScheduledRun.FormatDate(this.Context.Request.GetUserTimeZone(), true) : "Immediate"))</div>
        }
      </SettingsControl>
    }
    break;
}

@if (Model.Progress.Status != ScheduledTaskProgress.State.Running)
{
  <script>
    jQuery('.scheduled-task-run-now').addClass('show');
  </script>
}