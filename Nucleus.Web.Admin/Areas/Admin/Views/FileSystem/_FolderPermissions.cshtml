@model Nucleus.Web.ViewModels.Admin.FileSystem
@using Nucleus.Abstractions.Models
@if (Model.AvailableFolderRoles.Any())
{
	<div class="nucleus-form-tools">
		@Html.DropDownListFor(model => model.SelectedFolderRoleId, Model.AvailableFolderRoles, new { @class = "flex-fill" })
		<input type="submit" formaction="@Url.AreaAction("AddFolderPermissionRole", "FileSystem", "Admin")" value="Add Role" class="btn btn-primary" data-target="form.parent()" />
	</div>
}
@Html.HiddenFor(model => Model.Folder.Id)
@if (Model.FolderPermissions.Values.Any())
{
	<fieldset role="group" aria-labelledby="heading" class="flex-grow-1">
		<div class="d-flex mb-auto align-items-start permissions-table">
			<table>
			<tr>
				<th></th>
				@foreach (var permissionType in Model.FolderPermissionTypes)
				{
					<th class="text-center">@permissionType.Name</th>
				}
				<th></th>
			</tr>

			@foreach (var item in Model.FolderPermissions.Values)
			{
				<tr>
					<td>
						@item.Role.Name
					</td>

					@for (int permissionsCount = 0; permissionsCount < Model.FolderPermissions[item.Role.Id].Permissions.Count; permissionsCount++)
					{
						<td class="text-center">
							@Html.HiddenFor(model => Model.FolderPermissions[item.Role.Id].Permissions[permissionsCount].Id)
							@Html.HiddenFor(model => Model.FolderPermissions[item.Role.Id].Permissions[permissionsCount].PermissionType.Id)
							@Html.HiddenFor(model => Model.FolderPermissions[item.Role.Id].Permissions[permissionsCount].PermissionType.Scope)
							@if (Model.FolderPermissions[item.Role.Id].Permissions[permissionsCount].PermissionType.Scope == PermissionType.PermissionScopeNamespaces.Disabled)
							{
								<span class="nucleus-material-icon">&#xe8f5;</span>
							}
							else
							{
								@Html.CheckBoxFor(model => Model.FolderPermissions[item.Role.Id].Permissions[permissionsCount].AllowAccess)
							}
						</td>
					}

					<td class="nucleus-small-cell"><input type="submit" formaction="@Url.AreaAction("DeleteFolderPermissionRole", "FileSystem", "Admin", new { id = item.Role.Id })" value="&#xe14c;" class="nucleus-material-icon btn btn-danger" title="Delete" data-target="form.parent()" /></td>
				</tr>
			}
		</table>
		</div>

		@Html.HiddenFor(model => model.DisableCopy)
		<div class="btn-group align-self-start align-items-center" role="group">
			<button type="button" class="folder-permissions-copy-dropdown btn btn-success btn-sm dropdown-toggle@(Model.DisableCopy ? " disabled" : "")" data-bs-toggle="dropdown" aria-expanded="false">
				Copy Permissions to Descendants
			</button>
			<ul class="dropdown-menu">
				<li>
					<label class="dropdown-item">
						Replace all Permissions ...
						<button type="submit" class="collapse" formaction="@Url.AreaAction("CopyPermissionsReplaceAll", "FileSystem", "Admin")" data-confirm="This operation will overwrite all permissions of all descendant folders with permissions from this folder. Are you sure that you want to continue?" />
					</label>
				</li>
				<li>
					<label class="dropdown-item">
						Merge Permissions ...
						<button type="submit" class="collapse" formaction="@Url.AreaAction("CopyPermissionsMerge", "FileSystem", "Admin")" data-confirm="This operation will add permissions from this folder to all descendant folders. Are you sure that you want to continue?" />
					</label>
				</li>
			</ul>
		</div>
	</fieldset>
}


