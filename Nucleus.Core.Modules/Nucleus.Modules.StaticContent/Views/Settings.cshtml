@model Nucleus.Modules.StaticContent.ViewModels.Settings
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Modules.StaticContent.ViewModels
<h2 class="nucleus-modal-caption">Static Content Settings</h2>
@Html.AddStyle("~!/../settings.css")
@using (Html.BeginNucleusForm("Settings", "StaticContentAdmin", "StaticContent", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
	<fieldset class="flex-grow-1" role="group" aria-label="Settings">
		<h2>Settings</h2>
		<SettingsControl caption="Select File" helptext="Select the default file to display.">
			<div class="nucleus-flex-fields nucleus-fileselector">
				@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { file = Model.DefaultFile, propertyName = "DefaultFile" })
				@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { folder = Model.DefaultFile?.Parent })
			</div>
		</SettingsControl>
		<SettingsControl caption="Add Copy Buttons?" class="inner-inline" rendermode="LabelLast" helptext="Specifies whether to automatically add a 'copy' button to <code> elements.">
			@Html.CheckBoxFor(model => model.AddCopyButtons, new { @class = "ToggleSwitch" })
		</SettingsControl>
	</fieldset>

	<div class="nucleus-form-buttonrow">
		@Html.SubmitButton("", "Save Settings", @Url.NucleusAction("SaveSettings", "StaticContentAdmin", "StaticContent"), new { @class = "btn btn-primary" })
	</div>
}
