@model Nucleus.Modules.Links.ViewModels.Editor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@Html.AddStyle("~!/../settings.css")

@using (Html.BeginNucleusForm("Editor", "Admin", "Links", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
	<fieldset role="group" aria-labelledby="heading">
		<h2 class="nucleus-modal-caption">Link Properties</h2>
		@Html.HiddenFor(model => model.Link.Id)

		<SettingsControl caption="Title" helptext="Document title">
			@Html.TextBoxFor(model => model.Link.Title)
		</SettingsControl>

		<SettingsControl caption="Description" helptext="Description of the document">
			@Html.TextAreaFor(model => model.Link.Description)
		</SettingsControl>


		<div class="nucleus-flex-fields">
			@if (Model.CategoryList != null)
			{
				<SettingsControl caption="Category" helptext="Link category">
					@Html.DropDownListFor(model => model.Link.Category.Id, new SelectList(Model.CategoryList.Items, "Id", "Name"), "(select)")
				</SettingsControl>
			}
			<SettingsControl caption="Link Type" helptext="Link Type">
				@Html.DropDownListFor(model => model.Link.LinkType, new SelectList(Model.LinkTypes, "Key", "Value"), new { @data_autopostbackevent = "change" })
			</SettingsControl>
		</div>

		@switch (Model.Link.LinkType)
		{
			case Nucleus.Modules.Links.Models.LinkTypes.File:
				<SettingsControl caption="File" helptext="File">
					<div class="nucleus-flex-fields nucleus-fileselector">
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { model = Model.Link.LinkFile?.File, propertyName = "Link.LinkFile.File" })
						@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { })
					</div>
				</SettingsControl>
				break;
			case Nucleus.Modules.Links.Models.LinkTypes.Page:
				<SettingsControl caption="Page" helptext="Link page" class="links-page-list">
					@Html.PageListFor(model =>  model.Link.LinkPage.Page.Id, Model.PageMenu, Guid.Empty)
					@*@Html.DropDownListFor(model => model.Link.LinkPage.Page.Id, new SelectList(Model.Pages, "Id", "Name"), "root")*@
				</SettingsControl>
				break;
			default:
				<SettingsControl caption="Url" helptext="Link Url">
					@Html.TextBoxFor(model => model.Link.LinkUrl.Url)
				</SettingsControl>
				break;
		}

	</fieldset>

	<div class="nucleus-form-tools">
		@Html.SubmitButton("", "Save Link", @Url.NucleusAction("SaveLink", "Admin", "Links"), new { data_target = "#LinksList" })
		@if (Model.Link.Id != Guid.Empty)
		{
			@Html.SubmitButton("", "Delete Link", @Url.NucleusAction("DeleteLink", "Admin", "Links", new { id = @Model.Link.Id }), new { @class = "btn btn-danger", data_target = "#LinksList", @data_confirm = "Delete this link?" })
		}
	</div>
}

<script type="text/javascript">
	// Read the child pages of the item containing the "+" button
	jQuery('.links-page-list').on('click', '.nucleus-get-childpages', function (e)
	{
		// Add a ul to contain the new pages
		Page.LoadPartialContent(e, '@Url.NucleusAction("GetChildPages", "Admin", "Links")' + '?id=' + jQuery(this).attr('data-id'), jQuery(this).closest('li'));

		// remove the "+" button
		jQuery(this).remove();
	});	
</script>