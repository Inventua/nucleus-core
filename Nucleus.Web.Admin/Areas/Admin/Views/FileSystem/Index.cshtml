@model Nucleus.Web.ViewModels.Admin.FileSystem
@using Nucleus.Abstractions.Models.FileSystem
@using Nucleus.ViewFeatures
@using Nucleus.Extensions;
@using Nucleus.Abstractions.FileSystemProviders
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
<div class="nucleus-file-system-manager">
  <h2 class="nucleus-control-panel-heading">Files</h2>

  @using (Html.BeginAreaForm("Navigate", "FileSystem", "Admin", FormMethod.Post, new { @class = "d-flex flex-column overflow-auto", @data_target = ".nucleus-adminpage", @enctype = "multipart/form-data" }))
  {
    <div class="nucleus-form-buttonrow nucleus-flex-fields top-commandbar mx-1">
      <div class="nucleus-show-progress nucleus-show-progress-inside d-flex gap-1 align-items-center">
          @Html.DropDownListFor(model => model.SelectedProviderKey, new SelectList(Model.Providers, nameof(FileSystemProviderInfo.Key), nameof(FileSystemProviderInfo.Name)), "(select)", new { @class = "flex-1 nucleus-default-control providerKey" })        
      </div>
      <div>
        <RemoveWhiteSpace>
          <span>
            @foreach (var ancestor in Model.Ancestors)
            {
              @if (ancestor != Model.Ancestors.First())
              {
                <text>&nbsp;/&nbsp;</text>
                @Html.AreaActionLink(ancestor.Name, "Index", "FileSystem", "Admin", new { folderId = ancestor.Id }, new { @class = "NavigateLink nucleus-show-progress nucleus-show-progress-after", @data_target = ".nucleus-adminpage" })
              }
              else
              {
                <a title="Top level" href="@Url.AreaAction("Index", "FileSystem", "Admin", new { folderId = ancestor.Id })" class="btn btn-sm btn-outline-primary NavigateLink nucleus-show-progress nucleus-show-progress-after nucleus-material-icon" data-target=".nucleus-adminpage">&#xe2c7;</a>
              }
            }
          </span>
        </RemoveWhiteSpace>
      </div>
      <div class="d-flex align-items-center flex-0 gap-1 nucleus-show-progress nucleus-show-progress-inside">
        @Html.TextBoxFor(model => model.SearchTerm, new { @class = "flex-1" })
        @Html.SubmitButton("", "Search", @Url.AreaAction("Search", "FileSystem", "Admin"), new { @data_target = "#filesystem-search-results", @class = "btn btn-primary btn-sm" })
      </div>
    </div>

    @Html.HiddenFor(model => model.Folder.Id)

    <div class="nucleus-form-toolbar">
      @if (!String.IsNullOrEmpty(Model.Folder.Path) && Model.Folder.Parent != null)
      {
        <a href="@Url.AreaAction("Index", "FileSystem", "Admin", new { folderId = Model.Folder.Parent.Id })" data-target=".nucleus-adminpage" class="btn btn-secondary btn-sm nucleus-show-progress nucleus-show-progress-inside">
          <span class="nucleus-material-icon">&#xe5c4;</span>
          <span>Back</span>
        </a>
        @* @Html.LinkButton("&#xe5c4;", "Back", @Url.AreaAction("Index", "FileSystem", "Admin", new { folderId = Model.Folder.Parent.Id }), new { @data_target = ".nucleus-adminpage", @class = "btn btn-secondary btn-sm nucleus-show-progress nucleus-show-progress-inside" }) *@
      }
      @if (Model.Folder.Capabilities.CanHaveFolders)
      {
        @Html.AreaActionLink("Create Folder", "ShowCreateFolderDialog", "FileSystem", "Admin", new { folderId = Model.Folder.Id }, new { @class = "btn btn-secondary btn-sm", @data_target = "#nucleus-popupdialog .modal-body" })
      }
      @if (Model.Folder.Capabilities.CanStoreFiles)
      {
        <div class="btn-group" role="group">
          <button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="nucleus-material-icon">&#xe2c6;</span> Upload
          </button>
          <ul class="dropdown-menu">
            <li>
              <label class="dropdown-item">
                Selected Files ...
                <input id="selected-files" type="file" name="mediaFiles" class="collapse" multiple="multiple" formaction="@Url.AreaAction("UploadFile", "FileSystem", "Admin")">
              </label>
            </li>
            <li>
              <label class="dropdown-item">
                Upload and un-zip ZIP archive ...
                <input type="file" name="archiveFile" accept="application/zip" class="collapse" formaction="@Url.AreaAction("UploadArchive", "FileSystem", "Admin")">
              </label>
            </li>
          </ul>
        </div>
      }
      else
      {
        <button type="button" class="btn btn-secondary btn-sm" aria-disabled="true" disabled>Upload File</button>
      }

      @if (Model.Folders.Any() || Model.Files.Any())
      {
        @Html.SubmitButton("", "Download", @Url.AreaAction("Download", "FileSystem", "Admin"), new { @class = "btn btn-primary btn-sm", @data_target = "window" })
      }
      @if (Model.EnableDelete)
      {
        @Html.SubmitButton("", "Delete", @Url.AreaAction("ShowDeleteDialog", "FileSystem", "Admin"), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-danger btn-sm" })
      }
      @if (Model.EnableRename)
      {
        @Html.SubmitButton("", "Rename", @Url.AreaAction("ShowRenameDialog", "FileSystem", "Admin"), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-secondary btn-sm" })
      }
      @Html.SubmitButton("&#xe897;", "Folder Settings", @Url.AreaAction("EditFolderSettings", "FileSystem", "Admin", new { folderId = Model.Folder.Id }), new { @data_target = "#nucleus-popupdialog .modal-body", @class = "btn btn-secondary btn-sm" })

      @if (Model.Folder.Capabilities.CanStoreFiles)
      {
        <div class="files-droptarget ms-auto border rounded border-1 border-dark d-flex align-items-center fs-small px-2">
          <span class="nucleus-material-icon icon-large me-2">&#xe2c3;</span>
          <span>Drag here to Upload Files</span>
        </div>
      }
    </div>

    <ProgressBar caption="Uploading file(s) ..." class="upload-progress"></ProgressBar>

    @if (Model.Folder?.Permissions?.Any() != true)
    {
      <div class="alert alert-warning">This folder does not have any permissions set.  Click Folder Settings to create permissions, unless the files in this folder are for system use only.</div>
    }
    @if (!Model.Folders.Any() && !Model.Files.Any())
    {
      <div class="alert alert-warning">This folder is empty</div>
    }
    else
    {
      @await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.PagingControl), new { model = @Model.PagingSettings, propertyName = nameof(Model.PagingSettings) })

      <div class="overflow-auto">
        <table class="nucleus-file-system-table table table-sm table-sticky-headers">
          <thead>
            <tr>
              <th class="ps-0"><button type="button" class="nucleus-toggle-selections btn btn-none fs-5 me-1 shadow-none nucleus-material-icon">&#xe146;</button>Name</th>
              <th class="file-type">Type</th>
              <th class="file-modified-date">Modified Date</th>
              <th class="file-size">Size</th>
              <th class="file-dimensions">Dimensions</th>
            </tr>
          </thead>
          <tbody>
            @for (var folderCount = 0; folderCount < Model.Folders.Count; folderCount++)
            {
              <tr>
                <td>
                  <label>
                    @if (Model.Folders[folderCount].Capabilities.CanRename || Model.Folders[folderCount].Capabilities.CanDelete)
                    {
                      @Html.CheckBoxFor(model => Model.Folders[folderCount].IsSelected, new { @class = "nucleus-filesystem-folderselector" })
                    }
                    @Html.HiddenFor(model => Model.Folders[folderCount].Id)
                    @Html.AreaActionLink(Model.Folders[folderCount].Name, "Index", "FileSystem", "Admin", new { folderId = @Model.Folders[folderCount].Id }, new { @class = "NavigateLink nucleus-show-progress nucleus-show-progress-after", @data_target = ".nucleus-adminpage" })
                  </label>
                </td>
                <td class="file-type">Folder</td>
                <td class="file-modified-date">@Model.Folders[folderCount].DateModified.FormatDate(this.Context.Request.GetUserTimeZone())</td>
                <td class="file-size" />
                <td class="file-dimensions" />
              </tr>
            }

            @for (var fileCount = 0; fileCount < Model.Files.Count; fileCount++)
            {
              var isRecent = Math.Abs(Model.Files[fileCount].DateModified.Subtract(DateTime.UtcNow).TotalMinutes) < 5;              
              <tr>
                <td class="@(isRecent ? "fw-bold" : "")@(Model.SelectedFileId == Model.Files[fileCount].Id ? "fw-bold text-primary selected-file" : "")">
                  <label>
                    @Html.CheckBoxFor(model => Model.Files[fileCount].IsSelected, new { @class = "nucleus-filesystem-fileselector" })
                    @Model.Files[fileCount].Name
                    @Html.HiddenFor(model => Model.Files[fileCount].Id)
                  </label>
                </td>
                <td class="file-type">File</td>
                <td class="file-modified-date@(isRecent ? " fw-bold" : "")">@Model.Files[fileCount].DateModified.FormatDate(this.Context.Request.GetUserTimeZone())</td>
                <td class="file-size">@Model.Files[fileCount].Size.FormatFileSize()</td>
                <td class="file-dimensions">
                  @if (Model.Files[fileCount].Width > 0 && Model.Files[fileCount].Height > 0)
                  {
                    @($"{Model.Files[fileCount].Width} x {Model.Files[fileCount].Height}")
                  }
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    }
  }

  <Modal id="filesystem-search-results"></Modal>
</div>

<script>
  jQuery(function ()
  {
    if ('@Model.SelectedFileId' !== '@Guid.Empty')
    {
      var selectedFileElement = jQuery('.selected-file');
      if (selectedFileElement.length !== 0)
      {
        window.setTimeout(function ()
        {
          selectedFileElement[0].scrollIntoView({ block: "center", inline: "nearest" });
        }, 100);
      }
    }

    jQuery('.providerKey').on('change', function (event)
    {
      var newEvent = jQuery.Event('submit', { originalEvent: event });
      jQuery(this).parents('form').first().trigger(newEvent);
    });

    jQuery('.nucleus-toggle-selections').on('click', function (event)
    {
      var checkboxElements = jQuery('.nucleus-filesystem-folderselector, .nucleus-filesystem-fileselector');

      if (checkboxElements.filter(':checked').length > 0)
      {
        // one or more file system items are selected, un-select all
        checkboxElements.prop('checked', false);
      }
      else
      {
        // no file system items are selected, select all
        checkboxElements.prop('checked', true);
      }
    });

    jQuery('.files-droptarget')
      .on('dragover', function (event)
      {
        event.preventDefault();
        event.stopPropagation();
        jQuery(this).addClass('dragging');
      })
      .on('dragleave', function (event)
      {
        event.preventDefault();
        event.stopPropagation();
        jQuery(this).removeClass('dragging');
      })
      .on('drop', function (event)
      {
        event.preventDefault();
        event.stopPropagation();
        jQuery(this).removeClass('dragging');
        jQuery('#selected-files')[0].files = event.originalEvent.dataTransfer.files;
        jQuery('#selected-files').trigger('change');
      });

    _cancelProgress();

    jQuery(Page).off('progress.file-system-manager');
    jQuery(Page).on('progress.file-system-manager', function (args)
    {
      _cancelProgress();
      _progressTimeoutId = window.setTimeout(() =>
      {
        // manually create a progress spinner for the paging controls buttons
        if (jQuery('.nucleus-file-system-manager .nucleus-progress-spinner').length === 0)
        {
          var progress = jQuery('<div class="spinner-border spinner-border-sm text-primary nucleus-progress-spinner ms-2 xx" role="status"/>');
          progress.appendTo(jQuery('.nucleus-file-system-manager .nucleus-form-buttonrow'));
        }
      }, 600);
    });

    // remove the  progress spinner when the request completes
    jQuery('.nucleus-file-system-manager form').off('ready.file-system-manager');
    jQuery(Page).on("ready.file-system-manager", function (e, args)
    {
      _cancelProgress();
      jQuery('.nucleus-file-system-manager .nucleus-progress-spinner').remove();
    });

    function _cancelProgress()
    {
      if (typeof _progressTimeoutId === 'undefined') return;
      window.clearTimeout(_progressTimeoutId);
      _progressTimeoutId = -1;
    }
  });



</script>
