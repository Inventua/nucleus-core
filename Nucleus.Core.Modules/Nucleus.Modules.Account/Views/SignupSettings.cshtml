@model Nucleus.Modules.Account.ViewModels.SignupSettings
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions
<h2 class="nucleus-modal-caption">Signup Module Settings</h2>
@using (Html.BeginNucleusForm("SaveSettings", "SignupAdmin", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
  <fieldset role="group" aria-label="reCAPTCHA Settings" class="flex-grow-1">
    <div class="alert alert-info">
      <h3 class="mt-0">Google reCAPTCHA</h3>
      <p>The Google reCAPTCHA service protects your signup page from abuse.</p>
      <a href="https://cloud.google.com/security/products/recaptcha" target="_blank" class="">About Google reCAPTCHA</a>
    </div>

    <SettingsControl caption="Enable reCAPTCHA?" rendermode="LabelLast" class="inner-inline EnableRecaptcha" helptext="Enable reCAPTCHA to protect your signup form from abuse.">
      @Html.CheckBoxFor(model => model.RecaptchaEnabled, new { @class = "ToggleSwitch" })
    </SettingsControl>

    <div class="RecaptchaSettings">
      <SettingsControl caption="reCAPTCHA Site Key" helptext="Visit https://www.google.com/recaptcha/admin/create to create a recaptcha site key.">
        @Html.TextBoxFor(model => model.RecaptchaSiteKey)
      </SettingsControl>

      <div class="nucleus-flex-fields">
        <SettingsControl caption="reCAPTCHA Secret Key" helptext="To get your reCAPTCHA secret key in the Google Captcha web console, click the Enterprise Key's Overview, select the 'Integration' tab and click 'USE LEGACY KEY'." class="flex-grow-2">
          @Html.PasswordFor(model => model.RecaptchaSecretKey, new { value = (Model.IsSecretKeySet ? Nucleus.Modules.Account.ViewModels.SignupSettings.DUMMY_PASSWORD : "") })
        </SettingsControl>

        <SettingsControl caption="reCAPTCHA Action" helptext="Specifies your reCAPTCHA action. Use only alphanumeric characters, slashes, and underscore. This is used in the reCAPTCHA admin console for reporting and for adaptive risk analysis. Recommended value: signup." class="flex-grow-2">
          @Html.TextBoxFor(model => model.RecaptchaAction)
        </SettingsControl>

        <SettingsControl caption="reCAPTCHA Score Threshold" helptext="Specifies the minimum required reCAPTCHA interaction score. A value of 0 permits all messages, while a value of 1 blocks all messages. The default setting is 0.5.">
          @Html.TextBoxFor(model => model.RecaptchaScoreThreshold, new { @type = "number", @inputmode = "decimal", @min = "0.0", @max = "1.0", @step = "0.1" })
        </SettingsControl>
      </div>
    </div>
  </fieldset>
  <div class="nucleus-form-buttonrow">
    @Html.SubmitButton("", "Save Settings", @Url.NucleusAction("SaveSettings", "SignupAdmin", "Account"), new { })
  </div>
}

<script>
  SignupSettings_ShowSettings();

  jQuery('.EnableRecaptcha input[type=checkbox]').on('change', SignupSettings_ShowSettings);

  function SignupSettings_ShowSettings()
  {
    if (jQuery('.EnableRecaptcha input[type=checkbox]').is(':checked'))
    {
      jQuery('.RecaptchaSettings').css('opacity', '1.0');
      jQuery('.RecaptchaSettings * ').prop('disabled', false);
    }
    else
    {
      jQuery('.RecaptchaSettings').css('opacity', '0.25');
      jQuery('.RecaptchaSettings *').prop('disabled', true);
    }
  }
</script>
