@model Nucleus.Web.ViewModels.Admin.ScheduledTaskEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@using Nucleus.Abstractions.Models.TaskScheduler

<div class="ScheduledTasks">
	<Tab>
		<TabItem target="#task-properties" caption="Properties" active="true"></TabItem>
		<TabItem target="#task-history" caption="History"></TabItem>
		<TabItem target="#task-logs" caption="Logs"></TabItem>
	</Tab>

	<TabContent>
		<TabPanel id="task-properties" active="true">
			@using (Html.BeginAreaForm("Save", "ScheduledTasks", "Admin", FormMethod.Post, new { @data_target = ".nucleus-adminpage", @autocomplete = "off" }))
			{
				<fieldset ScheduledTask="group" aria-labelledby="heading">
					<h2>Scheduled Task</h2>
					@Html.HiddenFor(model => model.ScheduledTask.Id)

					<SettingsControl caption="Name" helptext="Scheduled Task name.  This is used for reference purposes only.">
						@Html.TextBoxFor(model => model.ScheduledTask.Name, new { @maxlength = 256 })
					</SettingsControl>

					<SettingsControl caption="Type Name" helptext="Scheduled task type name.  All available scheduled tasks are automatically displayed in this list.">
						@Html.DropDownListFor(model => model.ScheduledTask.TypeName, new SelectList(Model.AvailableServiceTypes), "(select)")
					</SettingsControl>

					<div class="nucleus-flex-fields interval">
						<SettingsControl caption="Enabled?" helptext="Specifies whether this task is enabled.  Disabled tasks do not run automatically, but can be executed manuallly by using the 'Run now' button.">
							@Html.CheckBoxFor(model => model.ScheduledTask.Enabled, new { @class = "ToggleSwitch" })
						</SettingsControl>
						<SettingsControl caption="Interval" helptext="Interval between each run.">
							@Html.TextBoxFor(model => model.ScheduledTask.Interval)
						</SettingsControl>

						<SettingsControl caption="Interval Type" helptext="Interval Type.">
							@Html.DropDownListFor(model => model.ScheduledTask.IntervalType, Html.GetEnumSelectList(typeof(ScheduledTask.Intervals)))
						</SettingsControl>

						<SettingsControl caption="Instance Type" helptext="Instance Type.">
							@Html.DropDownListFor(model => model.ScheduledTask.InstanceType, Html.GetEnumSelectList(typeof(ScheduledTask.InstanceTypes)))
						</SettingsControl>

						<SettingsControl caption="Keep History (count)" helptext="The number of history records to retain in the database.">
							@Html.DropDownListFor(model => model.ScheduledTask.KeepHistoryCount, new List<SelectListItem>
							{
								new SelectListItem{ Text="10", Value = "10" },
								new SelectListItem{ Text="25", Value = "25" },
								new SelectListItem{ Text="50", Value = "50" },
								new SelectListItem{ Text="100", Value = "100" },
								new SelectListItem{ Text="250", Value = "250" },
								new SelectListItem{ Text="500", Value = "500" },
								new SelectListItem{ Text="1000", Value = "1000" }
							 })
						</SettingsControl>
					</div>


					<SettingsControl caption="Next Run">
						<div>@(Model.LatestHistory == null ? "Immediate" : (Model.LatestHistory.NextScheduledRun.HasValue ? Model.LatestHistory.NextScheduledRun.FormatDate(true) : "-"))</div>
					</SettingsControl>

					@if (Model.ScheduledTask.Id != Guid.Empty)
					{
						<div class="text-end">
							<input type="submit" value="Run Now" formaction="@Url.AreaAction("RunNow", "ScheduledTasks", "Admin")" class="btn btn-secondary" />
						</div>
					}
				</fieldset>

				<div class="nucleus-button-panel">
					<input type="submit" class="btn btn-primary" value="Save Changes" />

					@if (Model.ScheduledTask.Id != Guid.Empty)
					{
						<input type="submit" class="btn btn-danger" value="Delete Scheduled Task" formaction="@Url.AreaAction("DeleteScheduledTask", "ScheduledTasks", "Admin")" data-confirm="Delete this Scheduled Task?" />
					}

				</div>
			}
		</TabPanel>

		<TabPanel id="task-history">
			<table>
				<tr>
					<th>Start Date</th>
					<th>Finish Date</th>
					<th>Next Run Date</th>
					<th>Server</th>
					<th>Status</th>
				</tr>
				@foreach (var item in Model.History)
				{
					<tr>
						<td>@item.StartDate.FormatDate(true)</td>
						<td>@item.FinishDate.FormatDate(true)</td>
						<td>@item.NextScheduledRun.FormatDate(true)</td>
						<td>@item.Server</td>
						<td>@item.Status</td>
					</tr>
				}
			</table>
		</TabPanel>

		<TabPanel id="task-logs">
			@if (Model.LogFiles != null)
			{
				@using (Html.BeginAreaForm("GetLogFile", "ScheduledTasks", "Admin", FormMethod.Post, new { @data_target = ".LogContent pre", @autocomplete = "off" }))
				{
					@Html.HiddenFor(model => model.ScheduledTask.Id)
					@Html.DropDownListFor(model => model.LogFile, new SelectList(Model.LogFiles, "Filename", "Title"), "(select)", new { @class = "LogFile" })
				}
				<div class="LogContent"><pre>@Model.LogContent</pre></div>
			}
			else
			{
				<span>There are no log files for this scheduled task.</span>
			}
		</TabPanel>
	</TabContent>
</div>

<script type="text/javascript">
	jQuery('.ScheduledTasks .LogFile').on('change', function () { jQuery(this).parents('form').submit(); })
</script>


