@model Nucleus.Modules.Documents.ViewModels.Editor
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models.FileSystem
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
<a class="PageBackButton" href="@Url.NucleusAction("Settings", "Documents", "Documents")" data-target=".ModuleSettings">&#xe5c4;</a>
@using (Html.BeginNucleusForm("Edit", "Documents", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
		<Tab>
			<tabitem target="#page-properties" caption="Properties" active="true"></tabitem>
		</Tab>
		<TabContent>
			<TabPanel id="page-properties" active="true">
				<fieldset role="group" aria-labelledby="heading">
					<h2>Basic Properties</h2>
					@Html.HiddenFor(model => model.SelectedDocument.Id)

					<SettingsControl caption="Title" helptext="Document title">
						@Html.TextBoxFor(model => model.SelectedDocument.Title)
					</SettingsControl>

					<SettingsControl caption="Description" helptext="Description of the document">
						@Html.TextAreaFor(model => model.SelectedDocument.Description)
					</SettingsControl>

					@if (Model.Categories != null)
					{
						<SettingsControl name="@nameof(Model.SelectedDocument.Category)" caption="Category" helptext="Document category">
							@Html.DropDownListFor(model => model.SelectedDocument.Category.Id, new SelectList(Model.Categories, "Id", "Name"), "(select)")
						</SettingsControl>
					}

					<SettingsControl caption="File" helptext="File">
						<div class="Flex FileSelector">
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { model = Model.SelectedDocument.File, propertyName = "SelectedDocument.File" })
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { })
						</div>
					</SettingsControl>
				</fieldset>
			</TabPanel>
		</TabContent>
		<div class="ButtonPanel">
			<input type="submit" class="DefaultButton" value="Save Changes" formaction="@Url.NucleusAction("Save", "Documents", "Documents")" />
			@if (Model.SelectedDocument != null && Model.SelectedDocument.Id != Guid.Empty)
			{
				<input type="submit" class="DeleteButton" value="Delete Document" formaction="@Url.NucleusAction("Delete", "Documents", "Documents")" data-confirm="Delete this document?" />
			}

		</div>
}