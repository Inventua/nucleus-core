{
  // This file contains default configuration values for Nucleus.  It is overwritten by both the install and upgrade 
  // packages.  Avoid making changes to this file - override settings in this file with matching settings in other 
  // config files (like appSettings.Production.json)
  "$schema": "./nucleus.schema.json",
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  // AllowedHosts: Specifies the host headers that are allowed to acces this site.  "*" allows all non-empty hosts.
  // https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hostfiltering.hostfilteringoptions.allowedhosts?view=aspnetcore-6.0
  "AllowedHosts": "*",
  "HostOptions": {
    // ShutdownTimeout: Specifies the default timeout (time allowed for operations to complete) when the web application is stopped. This
    // value is specified as a timespan (hh:mm:ss)
    "ShutdownTimeout": "00:00:20"
  },
  "FormOptions": {
    // MultipartBodyLengthLimit: Specifies the limit for each multipart body in a http request, in bytes.  This value must be set high enough 
    // for the largest file upload that you want to allow.  This value is overridden by MaxRequestSize.
    "MultipartBodyLengthLimit": 134217728
  },
  "Nucleus": {
    "EnableResponseCompression": true,
    "EnableForwardedHeaders": true,
    // MaxRequestSize:  Specifies the maximum MultipartBodyLengthLimit and IIS MaxRequestBodySize.  This value must be set high enough 
    // for the largest file upload that you want to allow.
    "MaxRequestSize": 67108864,
    "MergedFileProviderOptions": {
      "MergeJs": true,
      "MergeCss": true
    },
    "HtmlEditor": {
      // Html editor (client-side) plugin,  This section specifies stylesheets and script files used by the Html editor.
      "Scripts": [
        {
          "Type": "stylesheet",
          "Path": "~/Resources/Libraries/trumbowyg/ui/trumbowyg.min.css"
        },
        {
          "Type": "stylesheet",
          "Path": "~/Resources/Libraries/trumbowyg/Nucleus/trumbowyg.HtmlEditor.css"
        },
        {
          "Type": "javascript",
          "Path": "~/Resources/Libraries/trumbowyg/trumbowyg.min.js"
        },
        {
          "Type": "javascript",
          "Path": "~/Resources/Libraries/trumbowyg/plugins/history/trumbowyg.history.min.js"
        },
        {
          "Type": "javascript",
          "Path": "~/Resources/Libraries/trumbowyg/Nucleus/trumbowyg.images.js"
        },
        {
          "Type": "javascript",
          "Path": "~/Resources/Libraries/trumbowyg/Nucleus/trumbowyg.pages.js"
        },
        {
          "Type": "javascript",
          "Path": "~/Resources/Libraries/trumbowyg/Nucleus/trumbowyg.HtmlEditor.js"
        }
      ]
    },
    "FileSystems": {
      "AllowedFileTypes": [
        // AllowedFileTypes are used to specify one or more file extensions and a list of signatures for each file type.  Files with extensions
        // do not match an entry in this list cannot be uploaded and will generate an error.  Files integrity is validated by comparing the first
        // few bytes of the file with the specified signatures.  The file bytes must match at least one of the signatures.  Signatures are specified
        // as hexadecimal values, with no spaces or delimiters.  The special value "??" in a signature skips validation of the byte in the ordinal
        // position represented by the ?? characters.
        {
          "FileExtensions": [ ".css" ],
          "Signatures": [ "EFBBBF" ], // Note: Only UTF-8 CSS files are accepted
          "Restricted": true
        },
        {
          "FileExtensions": [ ".ico" ],
          "Signatures": [ "00000100" ]
        },
        {
          "FileExtensions": [ ".jpg", ".jpeg" ],
          "Signatures": [ "FFD8FFE0", "FFD8FFE1", "FFD8FFE2", "FFD8FFE3" ]
        },
        {
          "FileExtensions": [ ".gif" ],
          "Signatures": [ "47494638" ]
        },
        {
          "FileExtensions": [ ".bmp" ],
          "Signatures": [ "424d" ]
        },
        {
          "FileExtensions": [ ".png" ],
          "Signatures": [ "89504E470D0A1A0A" ]
        },
        {
          "FileExtensions": [ ".webp" ],
          "Signatures": [ "52494646????????57454250" ]
        },
        {
          "FileExtensions": [ ".tif", ".tiff" ],
          "Signatures": [ "492049", "49492A00", "4D4D002A", "4D4D002B" ]
        },
        {
          "FileExtensions": [ ".doc" ],
          "Signatures": [ "D0CF11E0A1B11AE1", "0D444F43", "CF11E0A1B11AE100", "DBA52D00", "ECA5C100" ]
        },
        {
          "FileExtensions": [ ".docx", ".pptx", ".xlsx" ],
          "Signatures": [ "504B0304", "504B030414000600" ]
        },
        {
          "FileExtensions": [ ".rtf" ],
          "Signatures": [ "7B5C72746631" ]
        },
        {
          "FileExtensions": [ ".xls" ],
          "Signatures": [
            "D0CF11E0A1B11AE1",
            "0908100000060500",
            "FDFFFFFF10",
            "FDFFFFFF1F",
            "FDFFFFFF22",
            "FDFFFFFF23",
            "FDFFFFFF28",
            "FDFFFFFF29"
          ]
        },
        {
          "FileExtensions": [ ".ppt" ],
          "Signatures": [
            "D0CF11E0A1B11AE1",
            "006E1EF0",
            "0F00E803",
            "A0461DF0",
            "FDFFFFFF0E000000",
            "FDFFFFFF1C000000",
            "FDFFFFFF43000000"
          ]
        },
        {
          "FileExtensions": [ ".vsd" ],
          "Signatures": [
            "D0CF11E0A1B11AE1"
          ]
        },
        {
          "FileExtensions": [ ".xpf"],
          "Signatures": [ "504B0304" ]
        },
        {
          "FileExtensions": [ ".pdf" ],
          "Signatures": [ "25504446" ]
        },
        {
          "FileExtensions": [ ".txt", ".md", ".htm", ".html" ],
          "Signatures": [ "" ]
        },
        {
          "FileExtensions": [ ".xml" ],
          "Signatures": [ "3C3F786D6C2076657273696F6E3D22312E30223F3E" ]
        },
        {
          "FileExtensions": [ ".mp4" ],
          "Signatures": [ "????????66747970" ]
        },
        {
          "FileExtensions": [ ".mpg", ".mpeg" ],
          "Signatures": [ "000001BA", "000001B3" ]
        },
        {
          "FileExtensions": [ ".webm", ".mkv", ".mka" ],
          "Signatures": [ "1A45DFA3" ]
        },
        {
          "FileExtensions": [ ".zip" ],
          "Signatures": [ "504B0304", "504B4C495445", "504B537058", "504B0506", "504B0708", "57696E5A6970", "504B030414000100" ]
        }
      ],
      "Providers": [
        // File providers have a key, name, provider type and root folder.  You can specify multiple file providers, and the user
        // will be presented with a list.  The "Name" property is shown to the user.  Each entry has a key which uniquely identifies 
        // the provider entry.
        {
          "Key": "local",
          "Name": "Local",
          "ProviderType": "Nucleus.Core.FileSystemProviders.LocalFileSystemProvider,Nucleus.Core",
          "RootFolder": "{DataFolder}//Content"
        }
      ]
    },
    "PasswordOptions": {
      // FailedPasswordWindowTimeout: Specifies the time span for which the system remembers that a user has had a failed password 
      // attempt.  Repeated failures within the specified file will increment the failed password attempts count, and when the 
      // FailedPasswordMaxAttempts threshold is exceeded, the user account will be locked for a period of time.
      "FailedPasswordWindowTimeout": "0:15:00",
      // FailedPasswordMaxAttempts: Specifies the number of failed password attempts before account lockout.
      "FailedPasswordMaxAttempts": 3,
      // FailedPasswordLockoutReset: Specifies the time span after which an account lockout is reset.
      "FailedPasswordLockoutReset": "0:10:00",

      // PasswordResetTokenExpiry:  Specifies the time span after which a password reset token expires.  Password reset tokens are
      // sent to the user when they request a password reset.
      "PasswordResetTokenExpiry": "02:00:00",

      // Password complexity rules are regular expressions.  You can specify multiple password complexity rules and all of them must
      // succeed (match) in order for a password to be valid.  
      "PasswordComplexityRules": [
        {
          "Pattern": "^(?=.*[A-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\\\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\[\\]])\\S{8,}$",
          "Message": "Passwords must contain at least one upper case character, at least one lower case character, at least one number, at least one symbol and must be at least 8 characters long."
        }
      ]
    },
    "ClaimTypeOptions": {
      // Default available claim types.  User profile properties always have a claim type, specified by Uri.  If the site administrator
      // configures a user profile property with a Uri value which match one of the entries below, the html input for that property
      // will be configured with a type attribute set to the claim type's InputType.  If the IsSiteDefault property is true, new sites will
      // automatically have a user profile property added for the entry.
      "Types": [
        {
          "DefaultName": "First Name",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
        },
        {
          "DefaultName": "Surname",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
        },
        {
          "DefaultName": "Mobile Phone",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone",
          "InputType": "tel",
          "IsSiteDefault": true
        },
        {
          "DefaultName": "Address",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress"
        },
        {
          "DefaultName": "State/Province",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince"
        },
        {
          "DefaultName": "Country",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country"
        },
        {
          "DefaultName": "Postal Code",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode"
        },
        {
          "DefaultName": "Email",
          "Uri": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
          "InputType": "email",
          "IsSiteDefault": true
        }
      ]
    },
    "CacheOptions": {
      // Specifies cache capacity and expiry for the named entity.  Once the cache Capacity threshold is reached, new cache entries will
      // displace the oldest cache entry.  Cache entries are automatically removed once they are older than ExpiryTime.  ExpiryTime is 
      // expressed as a time span (hh:mm:ss).
      // Nucleus core cache keys: 
      //   PageCache, PageMenuCache, MailTemplateCache, PageModuleCache, RoleCache, RoleGroupCache, ScheduledTaskCache, SiteCache, UserCache, FolderCache, ListCache, ContentCache, SessionCache. 
      // Modules can also cache values, refer to each module's documentation for the cache key name.  If configuration values are omitted, the default capacity is 1000, and 
      // expiry time is 5 minutes.
      "PageCache": {
        "Capacity": 500,
        "ExpiryTime": "00:10:00"
      },
      "PageMenuCache": {
        "Capacity": 100,
        "ExpiryTime": "00:10:00"
      },
      "MailTemplateCache": {
        "Capacity": 100,
        "ExpiryTime": "00:30:00"
      },
      "PageModuleCache": {
        "Capacity": 2000,
        "ExpiryTime": "00:05:00"
      },
      "RoleGroupCache": {
        "Capacity": 500,
        "ExpiryTime": "00:05:00"
      },
      "RoleCache": {
        "Capacity": 500,
        "ExpiryTime": "00:05:00"
      },
      "ScheduledTaskCache": {
        "Capacity": 100,
        "ExpiryTime": "00:30:00"
      },
      "SiteCache": {
        "Capacity": 100,
        "ExpiryTime": "00:05:00"
      },
      "UserCache": {
        "Capacity": 2500,
        "ExpiryTime": "00:05:00"
      },
      "FolderCache": {
        "Capacity": 1000,
        "ExpiryTime": "00:10:00"
      },
      "ListCache": {
        "Capacity": 100,
        "ExpiryTime": "00:30:00"
      },
      "ContentCache": {
        "Capacity": 2500,
        "ExpiryTime": "00:10:00"
      },
      "SessionCache": {
        "Capacity": 5000,
        "ExpiryTime": "00:05:00"
      }
    }
  }
}
