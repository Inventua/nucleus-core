@model Nucleus.Web.ViewModels.Admin.SystemIndex.LogSettingsViewModel
<div class="d-flex gap-2 m-1">
	@Html.DropDownListFor(model => model.LogFile, new SelectList(Model.LogFiles, "Filename", "Title"), "(select)", new { @class = "LogFile mb-1 flex-grow-1 h-100" })
	@if (Model.HasLoggingConfiguration)
	{
		<button type="button" title="View Logging Settings" class="btn btn-secondary btn-sm" aria-expanded="false" aria-controls="nucleus-system-logging-configuration" data-bs-toggle="modal" data-bs-target=".nucleus-system-logging-configuration">
			<span class="nucleus-material-icon">&#xe8b8;</span>
		</button>
	}
	<button type="button" class="btn btn-primary btn-sm" data-bs-toggle="collapse" data-bs-target=".log-options">
		Options <span class="nucleus-material-icon">&#xe5c5;</span>
	</button>

	<button aria-expanded="false" class="btn btn-secondary dropdown-toggle btn-sm" data-bs-toggle="dropdown" type="button">
		<span class="nucleus-material-icon">&#xf090;</span>
		Download 
	</button>

	<ul class="dropdown-menu" data-boundary="viewport">
		<li>
			<a type="button" class="btn btn-primary btn-sm btn-sm dropdown-item download-log" href="@Url.AreaAction("downloadlogfile", Model.ControllerName ?? "system", "admin", new { format="plain" })">
				Download as Text (csv)
			</a>
		</li>
		<li>
			<a type="button" class="btn btn-primary btn-sm btn-sm dropdown-item download-log" href="@Url.AreaAction("downloadlogfile", Model.ControllerName ?? "system", "admin", new { format="excel" })">
				Download as Excel Format (xlsx)
			</a>
		</li>
	</ul>

	<div class="collapse log-options">
    <div class="d-flex flex-column">
      <button type="button" class="btn btn-none nucleus-material-icon ms-auto" aria-label="Close" data-bs-toggle="collapse" data-bs-target=".log-options">
        &#xe5cd;
      </button>
    </div>
		<fieldset aria-label="Filtering and Sorting">
			<SettingsControl caption="Filter" helptext="Log source filter term.">
				<div class="d-flex gap-2">
					@Html.TextBoxFor(model=>model.LogFilterTerm, new { @class = "flex-grow-1"} )
					@Html.DropDownListFor(model => model.LogSortDescending, new SelectList(Model.LogSortOrders, "Key", "Value"))
					<button type="submit" data-target=".LogContent" data-bs-toggle="collapse" data-bs-target=".log-options" class="btn btn-primary btn-sm">Apply</button>
				</div>
			</SettingsControl>

			<SettingsControl caption="Include" helptext="Specify log levels to display.">
        <div class="log-levels">
          <SettingsControl caption="Critical" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Critical.">
            @Html.CheckBoxFor(model => model.LogIncludeCritical, new { @class = "ToggleSwitch" })
          </SettingsControl>
          <SettingsControl caption="Error" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Error.">
            @Html.CheckBoxFor(model => model.LogIncludeError, new { @class = "ToggleSwitch" })
          </SettingsControl>
          <SettingsControl caption="Warning" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Warning.">
            @Html.CheckBoxFor(model => model.LogIncludeWarning, new { @class = "ToggleSwitch" })
          </SettingsControl>
					<SettingsControl caption="Information" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Information.">
						@Html.CheckBoxFor(model=>model.LogIncludeInformation, new { @class = "ToggleSwitch"})
          </SettingsControl>
          <SettingsControl caption="Debug" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Debug.">
            @Html.CheckBoxFor(model => model.LogIncludeDebug, new { @class = "ToggleSwitch" })
          </SettingsControl>
					<SettingsControl caption="Trace" rendermode="LabelLast" class="inner-inline" helptext="Include logs with log level: Trace.">
						@Html.CheckBoxFor(model=>model.LogIncludeTrace, new { @class = "ToggleSwitch"})
          </SettingsControl>
				</div>
			</SettingsControl>
		</fieldset>
	</div>
</div>
<script>
	jQuery('.download-log').on('click', function ()
	{
		if (jQuery('#LogFile').val() === '')
		{
			Page.Dialog('Download', 'Please select a log file.', 'warning', '', 'Close');
			return false;
		}

		var href = jQuery(this).attr('href') + '&LogFile=' + jQuery('#LogFile').val();
		jQuery(this).attr('href', href);
	});

  jQuery(document).on('click', function (event) 
  { 
    if (jQuery('.log-options').is(':visible') && jQuery(event.target).parents('.log-options').length === 0)
    {
      jQuery('.log-options').collapse('hide');      
    }
  });
</script>