@model Nucleus.XmlDocumentation.ViewModels.Section
@using Nucleus.XmlDocumentation
@using Nucleus.ViewFeatures
@using Nucleus.XmlDocumentation.Models
@using Nucleus.XmlDocumentation.ViewModels
@* Renders documentation for a member (a constructor, property, field, method or event), of a class *@
@if (Model != null && Model.Members?.Any() == true)
{
	<div class="@Model.CssClass">
		<h3>@Model.Caption</h3>

		@foreach (var member in Model.Members)
		{
			<div class="api-member api-member-@(member.Type.ToString().ToLower())">
				<h4>
					@member.Name
					@switch (member.Type)
					{
						case ApiMember.MemberTypes.Method:
							var typeName = member.Parameters.GetSimpleParameterType();
							if (!String.IsNullOrEmpty(typeName))
							{
								@Html.Raw($"({typeName})")
							}
							break;
						case ApiMember.MemberTypes.Constructor:
							@Html.Raw("(constructor)")
							break;
					}
				</h4>
				@switch (member.Type)
				{
					case ApiMember.MemberTypes.Namespace:
					case ApiMember.MemberTypes.Class:
					case ApiMember.MemberTypes.Constructor:
					case ApiMember.MemberTypes.Method:							
						<code>@member.Name@(!String.IsNullOrEmpty(member.Parameters) ? $" ({member.Parameters})" : "()")</code>
						break;
				}
				@if (member?.Summary?.Items?.Any() == true)
				{
					<div class="api-summary">
						@await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent (Model.Page, member.Summary))
					</div>
				}

				@if (member?.Values?.Any() == true)
				{
					<div class="api-typeparameters">
						<h5>Values</h5>
						<table class="table">
							@foreach (var value in member.Values)
							{
								<tr>
									<td>@value.Description</td>
								</tr>
							}
						</table>
					</div>
				}

				@if (member?.TypeParams?.Any() == true)
				{
					<div class="api-typeparameters">
						<h5>Type Parameters</h5>
						<table class="table">
							@foreach (var parameter in member.TypeParams)
							{
								<tr>
									<td>@parameter.Name</td>
									<td>@parameter.Description</td>
								</tr>
							}
						</table>
					</div>
				}

				@if (member?.Params?.Any() == true)
				{
					<div class="api-parameters">
						<h5>Parameters</h5>
						<table class="table">
							<tr>
								<th>Name</th>
								<th>Type</th>
								<th></th>
							</tr>							
							@foreach (var parameter in member.Params)
							{
								<tr>
									<td>@parameter.Name</td>
									<td>@(parameter.IsRef ? "ref " : "")@parameter.Type</td>
									<td>@await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent (Model.Page, parameter))</td>
								</tr>
							}
						</table>
					</div>
				}

				@if (member?.Events?.Any() == true)
				{
					<div class="api-events">
						@foreach (var eventInfo in member.Events)
						{
							@if (eventInfo.Uri != null)
							{
								<mark><a href="@(eventInfo.Uri.IsAbsoluteUri ? eventInfo.Uri.ToString() : Url.PageLink(eventInfo.Uri.ToString()))">@eventInfo.Description</a></mark>
							}
							else
							{
								<div>@eventInfo.Description.FilterXMLWhiteSpace()</div>
							}
						}
					</div>
				}

				@if (member?.Exceptions?.Any() == true)
				{
					<div class="api-exceptions">
						@foreach (var exception in member.Exceptions)
						{
							@if (exception.Uri != null)
							{
								<mark><a href="@(exception.Uri.IsAbsoluteUri ? exception.Uri.ToString() : Url.PageLink(exception.Uri.ToString()))">@exception.Description</a></mark>
							}
							else
							{
								<div>@exception.Description.FilterXMLWhiteSpace()</div>
							}
						}
					</div>
				}

				@if (member?.Returns?.Items?.Any() == true)
				{
					<div class="api-returns">
						<h5>Returns</h5>
						<div>@await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent (Model.Page, member.Returns))</div>
					</div>
				}

				@if (member?.Examples?.Any() == true)
				{
					<div class="api-examples">
						<h5>Examples</h5>
						@foreach (var example in member.Examples)
						{
							<code>@example.FilterXMLWhiteSpace()</code>
						}
					</div>
				}

				@if (member?.Remarks?.Items?.Any() == true)
				{
					<div class="api-remarks">
						<h5>Remarks</h5>
						<div>
							@await Html.PartialAsync("_RenderMixedContent.cshtml", new MixedContent (Model.Page, member.Remarks))
						</div>
					</div>
				}

				@if (member?.SeeAlso?.Any() == true)
				{
					<div class="api-seealso">
						<h5>See Also</h5>
						@foreach (var seeAlso in member.SeeAlso)
						{
							@if (seeAlso.Uri != null)
							{
								<a class="link-primary" href="@(seeAlso.Uri.IsAbsoluteUri ? seeAlso.Uri.ToString() : Url.PageLink(seeAlso.Uri.ToString()))">@seeAlso.LinkText</a>
							}
							else
							{
								<mark>@seeAlso.CodeReference</mark>
							}
						}
					</div>
				}
			</div>
		}
	</div>
}
