@model Nucleus.Modules.Links.ViewModels.Editor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@Html.AddStyle("~!/../settings.css")
<div>
	<a class="PageBackButton" href="@Url.NucleusAction("Settings", "Admin", "Links")" data-target=".ModuleSettings">&#xe5c4;</a>
	@using (Html.BeginNucleusForm("Editor", "Admin", "Links", FormMethod.Post, new { @enctype = "multipart/form-data" }))
	{
		<fieldset role="group" aria-labelledby="heading">
			<h2>Link Properties</h2>
			@Html.HiddenFor(model => model.Link.Id)

			<SettingsControl caption="Title" helptext="Document title">
				@Html.TextBoxFor(model => model.Link.Title)
			</SettingsControl>

			<SettingsControl caption="Description" helptext="Description of the document">
				@Html.TextAreaFor(model => model.Link.Description)
			</SettingsControl>


			<div class="Flex">
				@if (Model.CategoryList != null)
				{
					<SettingsControl caption="Category" helptext="Link category">
						@Html.DropDownListFor(model => model.Link.Category.Id, new SelectList(Model.CategoryList.Items, "Id", "Name"), "(select)")
					</SettingsControl>
				}
				<SettingsControl caption="Link Type" helptext="Link Type">
					@Html.DropDownListFor(model => model.Link.LinkType, new SelectList(Model.LinkTypes, "Key", "Value"), new { @data_autopostbackevent = "change" })
				</SettingsControl>
			</div>
				
			@switch (Model.Link.LinkType)
			{
				case Nucleus.Modules.Links.Models.LinkTypes.Url:
					<SettingsControl caption="Url" helptext="Link Url">
						@Html.TextBoxFor(model => model.Link.LinkUrl.Url)
					</SettingsControl>
					break;
				case Nucleus.Modules.Links.Models.LinkTypes.File:
					<SettingsControl caption="File" helptext="File">
						<div class="Flex FileSelector">
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileSelector), new { model = Model.Link.LinkFile?.File, propertyName = "Link.LinkFile.File" })
							@await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.FileUpload), new { })
						</div>
					</SettingsControl>
					break;
				case Nucleus.Modules.Links.Models.LinkTypes.Page:
					<SettingsControl caption="Page" helptext="Link page">
						@Html.DropDownListFor(model => model.Link.LinkPage.Page.Id, new SelectList(Model.Pages, "Id", "Name"), "root")
					</SettingsControl>
					break;
			}
			
		</fieldset>

		<div class="Tools">
			@Html.SubmitButton("", "Save Settings", @Url.NucleusAction("SaveLink", "Admin", "Links"), new { })
			@if (!String.IsNullOrEmpty(@Model.Message))
			{
				<div class="Message">@Model.Message</div>
			}
		</div>
	}
</div>
