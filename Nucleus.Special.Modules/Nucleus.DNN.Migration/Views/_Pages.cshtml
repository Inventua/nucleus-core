@model Nucleus.DNN.Migration.ViewModels.Page
@Html.AddStyle("~!/../index.css")
<h2 class="nucleus-control-panel-heading">Migrate DNN Pages</h2>
<div>
  <div class="alert alert-primary">
    <ul>
      <li>Deleted pages will not be migrated.</li>
      <li>There are @Model.Pages.Where(page => page.CanSelect).Count() pages which can be migrated.</li>
      <li>
        Use the Layout and Container mappings section to control which Nucleus Layouts and Containers are 
        used for migrated pages and modules.  The layout that you select should have panes which match the 
        pane names used in DNN.  If it does not, then modules will be migrated with a pane name which is not 
        present in the selected layout, and will not be displayed.  After migration, you can use the page editor 
        to assign modules to panes which do exist in your layout.
      </li>
    </ul>
  </div>

  @using (Html.BeginNucleusForm("MigratePages", "DNNMigration", "DNNMigration", FormMethod.Post, new { }))
  {
    @Html.HiddenFor(model => model.PortalId)
    <div class="nucleus-flex-fields">
      <SettingsControl caption="Update Existing?" rendermode="LabelLast" class="inner-inline" helptext="Specifies whether to update pages when a matching page is found (by page route).  If this is not set, existing pages will generate an error.">
        @Html.CheckBoxFor(model => model.UpdateExisting, new { @class = "ToggleSwitch" })
      </SettingsControl>
      
      <button type="submit" class="btn btn-primary nucleus-show-progress nucleus-show-progress-before" data-target="#MigratePages" data-confirm="Migrate selected pages from DotNetNuke now?  This action cannot be reversed.">Migrate Pages</button>
    </div>
    
    <div class="my-2">
      <partial name="_Layouts.cshtml" model="Model" />
    </div>


    <div class="my-2">
      <h2>Pages</h2>
      <div class="overflow-auto">
        <table class="table table-striped table-sm table-sticky-headers">
          <thead>
            <tr>
              <th>@Html.CheckBox("toggle-all", true, new { @class = "toggle-all", @id = "" } )</th>
              <th>Id</th>
              <th>Name/Title</th>
              <th>Messages</th>
            </tr>
          </thead>
          <tbody>
          @for (int index = 0; index < Model.Pages.Count; index++)
          {
            <tr>
              <td>
                @if (Model.Pages[index].CanSelect)
                {
                  @Html.CheckBoxFor(model=> model.Pages[index].IsSelected)
                }
                @Html.HiddenFor(model=> model.Pages[index].PageId)
                @Html.HiddenFor(model=> model.Pages[index].CanSelect)
              </td>
              <td>@Model.Pages[index].PageId</td>
              <td>
                @Model.Pages[index].PageName
              </td>
              
              <td>
                <ul class="validation-results">
                  @foreach (var result in Model.Pages[index].Results)
                  {
                    <li>
                      <span class="glyph-@result.Type">@result.Message</span>
                    </li>
                  }
                </ul>
              </td>
            </tr>
          }
          </tbody>
        </table>
      </div>
    </div>

  }
</div>
