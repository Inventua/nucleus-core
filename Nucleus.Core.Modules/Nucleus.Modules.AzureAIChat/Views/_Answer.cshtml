@model Nucleus.Modules.AzureAIChat.ViewModels.Viewer
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Modules.AzureAIChat.ViewModels
@if (Model.History.Count > 0)
{
  var answer = Model.History.Last();
  <div class="alert @(answer.IsError == true ? "alert-warning" : "alert-success") alert-dismissible p-2 fade show">
    <h3><span>> </span>@answer.Question</h3>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>

    <ul class="answer-intents">
    @foreach(var intent in answer.Intents)
    {
      <li>@intent</li>
    }
    </ul>

    @for (int historyIndex = 0; historyIndex < Model.History.Count; historyIndex++)
    {
      @if (Model.History[historyIndex].IsError != true)
      {
        @Html.HiddenFor(model => Model.History[historyIndex].Question, new { @class = "history-question" })
        @Html.HiddenFor(model => Model.History[historyIndex].Answer, new { @class = "history-answer" })
      }
    }

    <div class="mb-1 small">
      <div>
        @answer.DateTime?.ToLocalTime().ToString("G")
      </div>
      <div>
        @Html.Raw(answer.Answer)
      </div>
    </div>

    @if (answer.Citations != null)
    {
      <ol>
        @foreach (var citation in answer.Citations.Select((Value, Index) => new { Index, Value }))
        {
          <li>
            <a href="@citation.Value.Url" target="_blank">
              @citation.Value.Title
            </a>
          </li>
        }
      </ol>
    }
  </div>
}