using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nucleus.Abstractions.Models
{
	/// <summary>
	/// Represents an installed module.
	/// </summary>
	public class ModuleDefinition : ModelBase
	{
		/// <summary>
		/// Unique record identifier.
		/// </summary>
		/// <remarks>
		/// The Id of a module definition is generated by the container's developer and is included in the extension manifest file used to install it.
		/// </remarks>
		public Guid Id { get; set; }

		/// <summary>
		/// Friendly name for the module definition, used for on-screen display in the administrative interface.
		/// </summary>
		public string FriendlyName { get; set; }

		/// <summary>
		/// Assembly-qualified class name for the module's Controller class.  The Controller class must inherit Microsoft.AspNetCore.Mvc.Controller
		/// </summary>
		public string ClassTypeName { get; set; }

		/// <summary>
		/// Name of the extension that the module belongs to.
		/// </summary>
		public string Extension { get; set; }

		/// <summary>
		/// Controller name for the view action.
		/// </summary>
		public string ViewController { get; set; }

		/// <summary>
		/// Controller name for the Edit (settings) action.  
		/// </summary>
		/// <remarks>
		/// This value is optional.  If it is not set, the ViewController will be used instead.
		/// </remarks>
		public string SettingsController { get; set; }

		/// <summary>
		/// The Action name for the default "View" of the module.
		/// </summary>
		public string ViewAction { get; set; }

		/// <summary>
		/// The Action name for the default "Editor" for the module.
		/// </summary>
		public string EditAction { get; set; }

		/// <summary>
		/// A comma-separated list of module categories.
		/// </summary>
		/// <remarks>
		/// Module definitions are grouped by category when selecting the module type when creating a module.
		/// </remarks>
		public string Categories{ get; set; }

		/// <summary>
		/// Determines whether two instances are equal by comparing their Ids.
		/// </summary>
		/// <param name="other"></param>
		/// <returns></returns>
		public override Boolean Equals(object other)
		{
			return this.Id == (other as ModuleDefinition)?.Id;
		}

		/// <summary>
		/// Executes the default hash function.
		/// </summary>
		/// <returns>A hash code for the current object.</returns>
		/// <remarks>
		/// This implementation exists to prevent a CS0659 compiler warning
		/// </remarks>
		public override int GetHashCode()
		{
			return this.Id.GetHashCode();
		}
	}
}
