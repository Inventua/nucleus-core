@model Nucleus.Modules.Search.ViewModels.Viewer
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Extensions
@using Nucleus.Modules.Search
@using Nucleus.Modules.Search.ViewModels
@Html.AddStyle("~#/viewer.css")
@Html.AddScript("~#/viewer.js")
@using (Html.BeginNucleusForm("Suggest", "Search", "Search", FormMethod.Post, new { @class = $"_{Model.ModuleId}", @data_target = ".search-suggestions", @role = "search", @data_resultsurl = Url.Content(Model.ResultsUrl) }))
{
  @Html.HiddenFor(model => model.IncludeFiles)
  @Html.HiddenFor(model => model.IncludeScopes)
  @Html.HiddenFor(model => model.MaximumSuggestions)
  @Html.HiddenFor(model => model.SearchProvider)

  <div class="search-display-@Model.DisplayMode.ToString().ToLower()">
    @if (Model.DisplayMode == Settings.DisplayModes.Full)
    {
      <label>
        <span class="text-nowrap">@Model.SearchCaption</span>
        @await Html.PartialAsync("_ViewerInput.cshtml", Model)
      </label>
    }
    else
    {
      @await Html.PartialAsync("_ViewerInput.cshtml", Model)
    }
  </div>
  @if (Model.MaximumSuggestions > 0)
  {
    <div class="search-suggestions collapse@(Model.SearchResults?.Results?.Any() == true ? " show" : "")"></div>
  }
}
@if (Model.ResultsPageId == Guid.Empty)
{
  @using (Html.BeginNucleusForm("Index", "Search", "Search", FormMethod.Post, new { @data_target = "form.parent()", @role = "search" }))
  {
    @Html.HiddenFor(model => model.SearchTerm, new { @id = "" })

    @if (Model.SearchResults?.Answers?.Any() == true)
    {
      <div class="search-answers">
        <h3>Suggested Answer@(Model.SearchResults.Answers.Count() > 1 ? "s" : "")</h3>
        @foreach (var result in Model.SearchResults.Answers)
        {
          <div class="search-answer">@Html.Raw(result.Answer)</div>
          @await Html.PartialAsync("_SearchResult.cshtml", new SearchResult(Model.SearchResults.MaxScore, result))
        }
      </div>
    }

    @if (Model.SearchResults != null)
    {
      @if (Model.SearchResults.Total == 0)
      {
        <div>No results for '@Model.SearchTerm'@Html.Raw(".")</div>
      }
      else
      {
        <div>Displaying search results @(((Model.PagingSettings.CurrentPageIndex - 1) * @Model.PagingSettings.PageSize) + 1) to @Model.PagingSettings.LastDisplayedRowIndex of @Model.SearchResults.Total for '@Model.SearchTerm'@Html.Raw(".")</div>
      }
    }

    @await Component.InvokeAsync(typeof(Nucleus.ViewFeatures.Controls.PagingControl), new { model = @Model.PagingSettings, propertyName = nameof(Model.PagingSettings) })


    @if (Model.SearchResults?.Results?.Any() == true)
    {
      <div class="search-results">
        @foreach (var result in Model.SearchResults.Results)
        {
          @await Html.PartialAsync("_SearchResult.cshtml", new SearchResult(Model.SearchResults.MaxScore, result))
        }
      </div>
    }
  }
}
<script>
  jQuery(function ()
  {
    jQuery(searchSelector).SearchResults({
      moduleId: '@Model.ModuleId'
    });

    // position the suggestions drop-down below the search term text box
    try
    {
      jQuery('._@Model.ModuleId .search-suggestions').each(function (index)
      {
        var element = jQuery(this).parents('section').find('._@Model.ModuleId .search-term');
        if (element.length !== 0)
        {
          jQuery(this).css('left', element.offset().left);
        }
      });
    }
    catch (error)
    {
      console.error(error);
    }

    @if (!String.IsNullOrEmpty(Model.SearchTerm) && Model.SearchResults != null)
      {
      <text>
      jQuery(document).ready(function ()
      {
        if (typeof gtag !== 'undefined')
        {
          gtag('event', 'search',
            {
              'term': '@Model.SearchTerm',
              'total-results': @Model.SearchResults.Total
                });
        }
      });
    </text>
    }
  });
</script>