@model Nucleus.Web.ViewModels.Admin.UserEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Extensions;
@using Nucleus.Abstractions.Models.Configuration
@using (Html.BeginAreaForm("Save", "Users", "Admin", FormMethod.Post, new { @data_target = ".nucleus-adminpage", @autocomplete = "off" }))
{
	<Tab>
		<TabItem target="#user-properties" caption="Properties" active="true"></TabItem>
		<TabItem target="#user-profile" caption="Profile"></TabItem>
		<TabItem target="#user-roles" caption="Roles"></TabItem>
	</Tab>

	<TabContent>
		<TabPanel id="user-properties" active="true">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Basic Properties</h2>
				@Html.HiddenFor(model => model.User.Id)

				<SettingsControl caption="User Name" helptext="Unique login name used to log in to the site.">
					@Html.TextBoxFor(model => model.User.UserName, new { @maxlength = 256 })
				</SettingsControl>

				@*only show password field for a new user*@
				@if (Model.User.Id == Guid.Empty)
				{
					<SettingsControl caption="Password" helptext="Enter a password for the user.">
						@Html.PasswordFor(model => model.EnteredPassword)
					</SettingsControl>
				}
				
				@if (!Model.IsCurrentUser)
				{
					<div class="nucleus-flex-fields">
						<SettingsControl caption="Approved" rendermode="LabelLast" class="inner-inline" helptext="Set whether this user is approved.">
							@Html.CheckBoxFor(model => model.User.Approved, new { @class = "ToggleSwitch" })
						</SettingsControl>

						<SettingsControl caption="Verified" rendermode="LabelLast" class="inner-inline" helptext="Set whether this user is verified.">
							@Html.CheckBoxFor(model => model.User.Verified, new { @class = "ToggleSwitch" })
						</SettingsControl>

            
				    @if (Model.User.Id == Guid.Empty)
            {
              @* show "temporary password" control for a new user*@
              <SettingsControl caption="Temporary Password" rendermode="LabelLast" class="inner-inline" helptext="Set whether this user must re-set their password the first time they log in.">
                @Html.CheckBoxFor(model => model.ExpirePassword, new { @class = "ToggleSwitch" })
              </SettingsControl>
            }
            else
            {
              @* for existing users, show "expire password", which does the same thing, but only if they have a password set, and their password isn't already expired *@
              @if (!String.IsNullOrEmpty(Model.User.Secrets?.PasswordHashAlgorithm) && !Model.IsPasswordExpired)
              {
                <SettingsControl caption="Expire Password" rendermode="LabelLast" class="inner-inline" helptext="Set whether this user must re-set their password the next time that they log in.">
                  @Html.CheckBoxFor(model => model.ExpirePassword, new { @class = "ToggleSwitch" })
                </SettingsControl>
              }
            }

          </div>
				}
        @if (Model.IsPasswordExpired)
        {
          <div class="alert alert-info">
            This user's password has expired.
          </div>
        }
			</fieldset>
		</TabPanel>

		<TabPanel id="user-profile">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Profile</h2>

				@for (int profileValueCount = 0; profileValueCount < Model.User.Profile.Count; profileValueCount++)
				{
					<div class="settings-control" title="@Model.User.Profile[profileValueCount].UserProfileProperty.HelpText">
						<label>
							<span>@Model.User.Profile[profileValueCount].UserProfileProperty.Name</span>
							@{Dictionary<string, object> parameters = new();
								parameters.Add("maxlength", 512);
								ClaimTypeOption claimTypeOption = Model.User.Profile[profileValueCount].UserProfileProperty.ClaimTypeOption(Model.ClaimTypeOptions);
								if (!String.IsNullOrEmpty(claimTypeOption.InputType))
								{
									parameters.Add("type", claimTypeOption.InputType);
								}
								if (!String.IsNullOrEmpty(claimTypeOption.Pattern))
								{
									parameters.Add("pattern", claimTypeOption.Pattern);
								} }
							@Html.TextBoxFor(model => model.User.Profile[profileValueCount].Value, parameters)
						</label>
						@Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.Id)
						@Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.Name)
						@Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.TypeUri)
					</div>
				}
			</fieldset>
		</TabPanel>

		<TabPanel id="user-roles">
			<fieldset role="group" aria-labelledby="heading">
				<h2>Roles</h2>
				@if (Model.AvailableRoles?.Any() == true)
				{
					<div class="nucleus-form-tools">
						@Html.DropDownListFor((model) => model.SelectedRoleId, Model.AvailableRoles, new { @class = "flex-fill" })
						<button type="submit" formaction="@Url.AreaAction("AddRole", "Users", "Admin")" data-target=".UserEditor" class="btn btn-secondary">Add Role</button>
					</div>
				}
				<table>
					@for (int roleCount = 0; roleCount < Model.User.Roles?.Count; roleCount++)
					{
						<tr>
							<td>
								@Html.HiddenFor(model => model.User.Roles[roleCount].Id)
								@Html.HiddenFor(model => model.User.Roles[roleCount].Name)
								@Model.User.Roles[roleCount].Name
							</td>

							<td class="nucleus-small-cell"><input type="submit" formaction="@Url.AreaAction("RemoveUserRole", "Users", "Admin")?roleId=@Model.User.Roles[roleCount].Id" value="&#xe14c;" class="nucleus-material-icon btn btn-danger" title="Delete User Role" data-target=".UserEditor" /></td>

						</tr>
					}
				</table>
			</fieldset>
		</TabPanel>
	</TabContent>
	<div class="nucleus-button-panel">
		<input type="submit" class="btn btn-primary" value="Save Changes" />
		@if (Model.User.Id != Guid.Empty && !Model.IsCurrentUser)
		{
			<button type="submit" class="btn btn-danger" formaction="@Url.AreaAction("DeleteUser", "Users", "Admin")" data-confirm="Delete this user?">Delete User</button>
		}
	</div>
}

<div class="UserEditor">

</div>
