@model Nucleus.Modules.Search.ViewModels.SearchResult
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Modules.Search
@using Nucleus.Extensions
<div class="search-result">
  <div>
    <a class="result-link" href="@Url.Content(Model.Result.GetUrl(Model.IncludeUrlTextFragment))" rel="noopener" title="@Model.Result.GetTitleText()">@Html.Raw(Model.Result.Title?.Trim())</a>
    @if (Model.ShowType && !String.IsNullOrEmpty(Model.Result.Type))
    {
      <span class="fst-italic small text-muted result-type">@Model.Result.Type</span>
    }
  </div>
  @if (Model.ShowUrl)
  {
    <span class="fst-italic small result-url">@(Model.Result.Url.StartsWith('/') ? Url.GetAbsoluteUri(Model.Result.Url) : Model.Result.Url)</span>
  }
  @if ((Model.ShowPublishDate || Model.ShowSize) && (Model.Result.PublishedDate.HasValue || Model.Result.Size.HasValue))
  {
    <div class="text-muted small fst-italic result-meta">
      @if (Model.ShowPublishDate && Model.Result.PublishedDate.HasValue)
      {
        <span>Published: @Model.Result.PublishedDate.FormatDate(this.Context.Request.GetUserTimeZone())@Html.Raw(".")</span>
      }

      @if (Model.ShowSize && Model.Result.Size.HasValue && Model.Result.Scope == @Nucleus.Abstractions.Models.FileSystem.File.URN)
      {
        <span>@Model.Result.Size.FormatFileSize()</span>
      }
    </div>
  }

  @if (Model.ShowSummary && !String.IsNullOrEmpty(@Model.Result.Summary))
  {
    <div class="result-summary">@Html.Raw(Model.Result.Summary)</div>
  }
  @if (Model.ShowCategories && Model.Result.Categories != null && Model.Result.Categories.Any())
  {
    <ul class="list-inline comma-separated result-categories">
      @foreach (var category in Model.Result.Categories)
      {
        <li class="list-inline-item">@category.Name</li>
      }
    </ul>
  }

  @if (Model.ShowScore)
  {
    <span class="fw-light small result-score">
      @Model.Result.GetAssessment(Model.MaxScore, Model.ShowScoreAssessment).Text
      @* @if (Model.Settings.ShowScoreAssessment && Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0 && Model.Result.Score.HasValue)
    {
    @assessmentText
    }
    @if (Model.Settings.ShowScoreAssessment && Model.SearchResults.MaxScore.HasValue && Model.SearchResults.MaxScore.Value > 0 && Model.Settings.ShowScore && Model.Result.Score.HasValue && assessmentCalculation.HasValue)
    {
    <text> - </text>
    }
    @if (Model.Settings.ShowScore && !String.IsNullOrEmpty(assessmentCalculationText))
    {
    <text>Score: </text>
    @assessmentCalculationText
    } *@
    </span>
  }
</div>