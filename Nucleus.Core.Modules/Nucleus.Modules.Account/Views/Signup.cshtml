@model Nucleus.Modules.Account.ViewModels.Signup
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Extensions
@using Nucleus.Abstractions.Models.Configuration
@Html.AddStyle(AddStyleHtmlHelper.WellKnownScripts.NUCLEUS_FORMS)
@if (Model.RecaptchaEnabled)
{
  @Html.AddScript("https://www.google.com/recaptcha/api.js?render=explicit&onload=onRecaptchaLoadCallback", true)
  @Html.AddScript("~#/signup.js")
}
@using (Html.BeginNucleusForm("Signup", "Signup", FormMethod.Post, new { @enctype = "multipart/form-data", @data_target = "form.parent()" }))
{
  @if (Model.ShowForm)
  {
    <fieldset aria-label="Sign Up">
      @Html.HiddenFor(model => model.ReturnUrl)
      <SettingsControl caption="User Name" helptext="Enter your new user name">
        @Html.TextBoxFor(model => model.User.UserName)
      </SettingsControl>

      @*only show password field for a new user*@
      @if (Model.User.Id == Guid.Empty)
      {
        <div class="nucleus-flex-fields">
          <SettingsControl caption="Password" helptext="Enter a password for the user">
            @Html.PasswordFor(model => model.NewPassword)
          </SettingsControl>
          <SettingsControl caption="Confirm Password" helptext="Confirm your new password">
            @Html.PasswordFor(model => model.ConfirmPassword)
          </SettingsControl>
        </div>
      }
      <h3>Profile</h3>

      @for (int profileValueCount = 0; profileValueCount < Model.User.Profile.Count; profileValueCount++)
      {
        <SettingsControl caption="@Model.User.Profile[profileValueCount].UserProfileProperty.Name" helptext="@Model.User.Profile[profileValueCount].UserProfileProperty.HelpText">
          @{
            Dictionary<string, object> parameters = new();
            ClaimTypeOption claimTypeOption = Model.User.Profile[profileValueCount].UserProfileProperty.ClaimTypeOption(Model.ClaimTypeOptions);
            if (claimTypeOption.InputType != null)
            {
              parameters.Add("type", claimTypeOption.InputType);
            }
            if (claimTypeOption.Pattern != null)
            {
              parameters.Add("pattern", claimTypeOption.Pattern);
            }
          }
          @Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.Id)
          @Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.Name)
          @Html.HiddenFor(model => model.User.Profile[profileValueCount].UserProfileProperty.TypeUri)
          @Html.TextBoxFor(model => model.User.Profile[profileValueCount].Value, parameters)
        </SettingsControl>
      }
    </fieldset>
    <div class="nucleus-control-panel-heading d-flex mt-1">
      @if (!String.IsNullOrEmpty(Model.RecaptchaSiteKey))
      {
        @Html.HiddenFor(model => model.RecaptchaVerificationToken, new { @class = "signup-recaptcha-verification-token" })
      }
      <button type="submit" class="btn btn-primary align-self-end me-2 signup-save" data-verification-site-key="@Model.RecaptchaSiteKey" data-verification-badge-element-selector=".recaptcha-badge" data-verification-token-element-selector=".signup-recaptcha-verification-token" data-verification-action="@Model.RecaptchaAction">Register</button>
      <a href="@Url.Content(Model.ReturnUrl)" class="btn btn-secondary align-self-end">Cancel</a>
      <div class="recaptcha-badge ms-auto"></div>
    </div>
  }
}
@if (Model.RecaptchaEnabled)
{
  <script>
    function onRecaptchaLoadCallback()
    {
      if ('@Model.RecaptchaSiteKey' !== '')
      {
        jQuery('.signup-save').Recaptcha({
          siteKey: '@Model.RecaptchaSiteKey',
          badgeElement: jQuery('.recaptcha-badge')
        });
      }
    }
  </script>
}