@model Nucleus.Modules.Forums.ViewModels.ViewForumPost
@using Nucleus.Abstractions
@using Nucleus.ViewFeatures
@using Nucleus.Extensions
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Modules.Forums.ViewModels
@Html.AddStyle("~!/../viewer.css")
@Html.AddStyle("~/Resources/css/forms.css")
<div class="Forums">
  @using (Html.BeginNucleusForm("SetForumPostStatus", "Forums", "Forums", FormMethod.Post, new { @autocomplete = "off", @data_target = "form.parent()" }))
  {
    <a class="btn btn-none" title="Back" href="@Url.PageLink(Model.Page, @Model.Forum.Name.FriendlyEncode())">
      <span class="nucleus-material-icon">&#xe5e0;</span>
      <h2 class="d-inline-block">@Model.Forum.Name</h2>
    </a>

    @*<div class="nucleus-form-tools">
  @if (!Model.IsSubscribedToForum && Model.CanSubscribe && Model.Subscription == null)
  {
  @Html.SubmitButton("", "Subscribe", Url.NucleusAction("SubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm", @title = "Subscribe to post", @data_target = ".Forums.parent()" })
  }
  @if (Model.Subscription != null)
  {
  @Html.SubmitButton("", "Un-subscribe", Url.NucleusAction("UnSubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm", @data_target = ".Forums.parent()" })
  }
  @Html.LinkButton("", "Back", Url.PageLink(Model.Page, @Model.Forum.Name.FriendlyEncode()), new { @class="btn btn-secondary btn-sm ms-auto" })
  </div>*@

    <div class="post">
      @Html.HiddenFor(model => model.Forum.Id)
      @Html.HiddenFor(model => model.Post.Id)
      @Html.HiddenFor(model => model.Post.ForumId)
      <div class="heading">
        <h3>@Model.Post.Subject</h3>
        <div class="controls">
          @if (Model.CanReply && !Model.Post.IsLocked)
          {
            @Html.LinkButton("", "Reply", Url.NucleusAction("ReplyPost", "Forums", "Forums", new { id = Model.Post.Id }), new { @class = "btn btn-primary btn-sm", @data_target = ".Forums.parent()" })
          }

          @*  @if (!Model.IsSubscribedToForum && Model.CanSubscribe && Model.Subscription == null)
        {
        @Html.SubmitButton("", "Subscribe", Url.NucleusAction("SubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm", @title = "Subscribe to post", @data_target = ".Forums.parent()" })
        }
        @if (Model.Subscription != null)
        {
        @Html.SubmitButton("", "Un-subscribe", Url.NucleusAction("UnSubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm", @data_target = ".Forums.parent()" })
        } *@

          @if ((!Model.IsSubscribedToForum && Model.CanSubscribe && Model.Subscription == null) || (Model.Subscription != null) || Model.CanEditPost || (Model.CanApprovePost && !Model.Post.IsApproved) || (Model.CanApprovePost && !Model.Post.IsRejected == true) || Model.CanDeletePost || (Model.CanLockPost && !Model.Post.IsLocked) || (Model.CanLockPost && Model.Post.IsLocked) || (Model.CanPinPost && !Model.Post.IsPinned) || (Model.CanPinPost && Model.Post.IsPinned))
          {
            <div class="dropdown justify-content-end">
              <button area-expanded="false" class="btn dropdown-toggle btn-secondary btn-sm" data-bs-toggle="dropdown" type="button">
                Actions
              </button>

              <ul class="dropdown-menu" data-boundary="viewport">
                @if (Model.CanEditPost)
                {
                  <li>
                    @Html.LinkButton("", "Edit Post", Url.NucleusAction("EditPost", "Forums", "Forums", new { id = Model.Post.Id }), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = ".Forums.parent()" })
                  </li>
                }
                @if (Model.CanApprovePost && !Model.Post.IsApproved)
                {
                  <li>
                    @Html.SubmitButton("", "Approve Post", Url.NucleusAction("ApproveForumPost", "Forums", "Forums"), new { @class = "btn btn-success btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.CanApprovePost && Model.Post.IsRejected != true)
                {
                  <li>
                    @Html.SubmitButton("", "Reject Post", Url.NucleusAction("RejectForumPost", "Forums", "Forums"), new { @class = "btn btn-danger btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.CanDeletePost)
                {
                  <li>
                    @Html.SubmitButton("", "Delete Post", Url.NucleusAction("DeleteForumPost", "Forums", "Forums"), new { @class = "btn btn-danger btn-sm dropdown-item", @data_target = "form.parent()", @data_confirm = "Delete this post?" })
                  </li>
                }
                @if (Model.CanLockPost && !Model.Post.IsLocked)
                {
                  <li>
                    @Html.SubmitButton("", "Lock Post", Url.NucleusAction("LockForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.CanLockPost && Model.Post.IsLocked)
                {
                  <li>
                    @Html.SubmitButton("", "Unlock Post", Url.NucleusAction("UnlockForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.CanPinPost && !Model.Post.IsPinned)
                {
                  <li>
                    @Html.SubmitButton("", "Pin Post", Url.NucleusAction("PinForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.CanPinPost && Model.Post.IsPinned)
                {
                  <li>
                    @Html.SubmitButton("", "Un-pin Post", Url.NucleusAction("UnPinForumPost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }

                @if ((!Model.IsSubscribedToForum && Model.CanSubscribe && Model.Subscription == null) || Model.Subscription != null)
                {
                  <li><hr class="dropdown-divider"></li>
                }

                @if (!Model.IsSubscribedToForum && Model.CanSubscribe && Model.Subscription == null)
                {
                  <li>
                    @Html.SubmitButton("", "Subscribe", Url.NucleusAction("SubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }
                @if (Model.Subscription != null)
                {
                  <li>
                    @Html.SubmitButton("", "Un-subscribe", Url.NucleusAction("UnSubscribePost", "Forums", "Forums"), new { @class = "btn btn-secondary btn-sm dropdown-item", @data_target = "form.parent()" })
                  </li>
                }

              </ul>
            </div>
          }
        </div>
      </div>
      <div class="heading">
        <div class="post-author">
          <div>Posted on @Model.Post.DateAdded.FormatDate(this.Context.Request.GetUserTimeZone()) by @(Model.Post.PostedBy?.UserName ?? "Deleted User")</div>
        </div>
        <div class="post-flags">
          @if (Model.Post.IsLocked)
          {
            <span>Locked</span>
          }
          @if (Model.Post.IsPinned)
          {
            <span>Pinned</span>
          }
          @if (Model.Post.IsApproved)
          {
            <span>Approved</span>
          }
          else
          {
            @if (Model.Post.IsRejected == true)
            {
              <span>Rejected</span>
            }
            else
            {
              <span>Not Approved</span>
            }
          }
        </div>
      </div>
      <div class="body">@(new Microsoft.AspNetCore.Html.HtmlString(@Model.Post.Body))</div>

      @if (Model.Post.Attachments?.Any() == true)
      {
        <h4>Attachments</h4>
        <div class="attachments">
          @for (var attachmentCount = 0; attachmentCount < Model.Post.Attachments.Count; attachmentCount++)
          {
            <a href="@Url.FileLink(Model.Post.Attachments[attachmentCount].File)" alt="@Model.Post.Attachments[attachmentCount].File.Name" target="_blank">
              <span class="icon nucleus-material-icon">&#xe873;</span>
              <span>@Model.Post.Attachments[attachmentCount].File.Name</span>
            </a>
          }
        </div>
      }

      <div class="nucleus-form-tools">
        <div class="AdminTools">
          @if (Model.CanEditPost && Model.Forum.EffectiveSettings().StatusList != null && Model.Forum.EffectiveSettings().StatusList.Items?.Any() == true)
          {
            @Html.DropDownListFor(model => model.Post.Status.Id, new SelectList(Model.Forum.EffectiveSettings().StatusList.Items, "Id", "Name"), new { @data_autopostbackevent = "change", @title = "Forum Post Status" })
          }
        </div>
      </div>
    </div>

    @if (Model.Replies.Count > 0)
    {
      <div class="replies">
        <h3>Replies</h3>
        @foreach (var reply in Model.Replies)
        {
          <div class="reply reply-level-@reply.Level" id="_@reply.Id">
            <div class="heading">
              <span>@(reply.PostedBy?.UserName ?? "Deleted User") replied on</span><span>@reply.DateAdded.FormatDate(this.Context.Request.GetUserTimeZone())</span>
              <div class="controls">
                @if (Model.CanReply && !Model.Post.IsLocked)
                {
                  @Html.LinkButton("", "Reply", Url.NucleusAction("ReplyPost", "Forums", "Forums", new { id = Model.Post.Id, replytoid = (reply.Level < Nucleus.Modules.Forums.ViewModels.ReplyForumPost.MAX_LEVELS ? reply.Id : Guid.Empty) }), new { @class = "btn btn-primary btn-sm" + (reply.Level >= Nucleus.Modules.Forums.ViewModels.ReplyForumPost.MAX_LEVELS ? " disabled" : ""), @data_target = ".Forums.parent()" })
                }

                @if ((reply.CanEditReply && !Model.Post.IsLocked) || (Model.CanApprovePost && !reply.IsApproved) || (Model.CanApprovePost && !reply.IsRejected == true) || (reply.CanDeleteReply && !Model.Post.IsLocked))
                {
                  <div class="dropdown justify-content-end">
                    <button area-expanded="false" class="btn dropdown-toggle btn-secondary btn-sm" data-bs-toggle="dropdown" type="button">
                      Actions
                    </button>

                    <ul class="dropdown-menu" data-boundary="viewport">
                      @if (reply.CanEditReply && !Model.Post.IsLocked)
                      {
                        <li>
                          @Html.LinkButton("", "Edit Reply", Url.NucleusAction("EditForumPostReply", "Forums", "Forums", new { postId = Model.Post.Id, replyId = reply.Id }), new { @data_target = "form.parent()", @class = "btn btn-primary btn-sm dropdown-item" })
                        </li>
                      }
                      @if (Model.CanApprovePost && !reply.IsApproved)
                      {
                        <li>
                          @Html.SubmitButton("", "Approve Reply", Url.NucleusAction("ApproveForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()", @class = "btn btn-success btn-sm dropdown-item" })
                        </li>
                      }
                      @if (Model.CanApprovePost && reply.IsRejected != true)
                      {
                        <li>
                          @Html.SubmitButton("", "Reject Reply", Url.NucleusAction("RejectForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()", @class = "btn btn-danger btn-sm dropdown-item" })
                        </li>
                      }
                      @if (reply.CanDeleteReply && !Model.Post.IsLocked)
                      {
                        <li>
                          @Html.SubmitButton("", "Delete Reply", Url.NucleusAction("DeleteForumPostReply", "Forums", "Forums", new { replyId = reply.Id }), new { @data_target = "form.parent()", @class = "btn btn-danger btn-sm dropdown-item", @data_confirm = "Delete this reply?" })
                        </li>
                      }
                    </ul>
                  </div>
                }
              </div>
            </div>
            <div class="reply-flags">
              @if (reply.IsApproved)
              {
                <span>Approved</span>
              }
              else
              {
                @if (reply.IsRejected == true)
                {
                  <span>Rejected</span>
                }
                else
                {
                  <span>Not Approved</span>
                }
              }
            </div>
            <div class="body">
              @(new Microsoft.AspNetCore.Html.HtmlString(reply.Body))
            </div>

            @if (reply.Attachments?.Any() == true)
            {
              <h4>Attachments</h4>
              <div class="attachments">
                @for (var attachmentCount = 0; attachmentCount < reply.Attachments.Count; attachmentCount++)
                {
                  <a href="@Url.FileLink(reply.Attachments[attachmentCount].File)" alt="@reply.Attachments[attachmentCount].File.Name" target="_blank">
                    <span class="icon nucleus-material-icon">&#xe873;</span>
                    <span>@reply.Attachments[attachmentCount].File.Name</span>
                  </a>
                }
              </div>
            }
          </div>
        }
      </div>
    }
    else
    {
      <span>There are no replies to this post.</span>
    }
  }
</div>
