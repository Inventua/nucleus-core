@model Nucleus.Web.ViewModels.Setup.SiteWizard
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.Abstractions
@addTagHelper "*, Nucleus.ViewFeatures"
<h3>Database Settings</h3>
<p class="alert alert-success">
  Select your database type, server name, authentication and other settings, and select your database name.  If you have been supplied with a database connection string,
  you can select your database type, skip the other values, and enter your connection string directly.  If you are using Sqlite, you don't have to select a database server or settings.
</p>

<div class="nucleus-flex-fields">
  <SettingsControl caption="Database Type" helptext="Select your database type.">
    @Html.DropDownListFor(model => model.DatabaseProvider, new SelectList(Model.DatabaseProviders), new { @data_target = "#site-databases", formaction = Url.AreaAction("Select", "SiteWizard", "Setup"), data_autopostbackevent = "change" })
  </SettingsControl>

  @if (Model.DatabaseProvider != "Sqlite")
  {
    <SettingsControl caption="Database Server Name" helptext="Enter your database server name." class="database-server collapse show">
      @Html.TextBoxFor(model => model.DatabaseServer)
    </SettingsControl>
  }
</div>

@if (Model.DatabaseProvider != "Sqlite")
{
  <SettingsControl caption="Use Integrated Security" rendermode="LabelLast" class="inner-inline database-integratedsecurity collapse show" helptext="If your database server supports it, choose integrated security.">
    @Html.CheckBoxFor(model => model.DatabaseUseIntegratedSecurity, new { @class = "ToggleSwitch", @data_target = "#site-databases", formaction = Url.AreaAction("ToggleAuthentication", "SiteWizard", "Setup"), data_autopostbackevent = "change" })
  </SettingsControl>

  <div class="nucleus-flex-fields collapse@(Model.DatabaseUseIntegratedSecurity ? "" : " show")">
    <SettingsControl caption="Database User Name" helptext="Enter your database user name." class="mb-auto">
      @Html.TextBoxFor(model => model.DatabaseUserName)
    </SettingsControl>

    <SettingsControl caption="Database Password" helptext="Enter your database password.">
      @Html.TextBoxFor(model => model.DatabasePassword, new { @type = "password" })
      <span class="text-danger fw-bold">Warning: This password will be visible in the connection string below.</span>
    </SettingsControl>
  </div>

  @if (Model.DatabaseProvider == "SqlServer")
  {
    <div class="nucleus-flex-fields">
      <SettingsControl caption="Use Encryption?" helptext="Specify whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed." rendermode="LabelLast" class="inner-inline database-encryption collapse show">
        @Html.CheckBoxFor(model => model.UseEncryption, new { @class = "ToggleSwitch", @data_target = "#site-databases", formaction = Url.AreaAction("GenerateConnectionString", "SiteWizard", "Setup"), data_autopostbackevent = "change" })
      </SettingsControl>
      <SettingsControl caption="Trust Server Certificate?" helptext="Specify whether to trust the SQL server certificate (bypass certificate chain validation)." rendermode="LabelLast" class="inner-inline database-encryption collapse show">
        @Html.CheckBoxFor(model => model.TrustServerCertificate, new { @class = "ToggleSwitch", @data_target = "#site-databases", formaction = Url.AreaAction("GenerateConnectionString", "SiteWizard", "Setup"), data_autopostbackevent = "change" })
      </SettingsControl>
    </div>
  }

  <SettingsControl caption="Database" helptext="Select your database." class="database-name">
    @Html.DropDownListFor(model => model.DatabaseName, new SelectList(Model.Databases), "(select)", new { @data_target="#site-databases", formaction = Url.AreaAction("GenerateConnectionString", "SiteWizard", "Setup"), data_autopostbackevent = "change" })
  </SettingsControl>
  @if (!String.IsNullOrEmpty(Model.ListDatabasesError))
  {
    <div>@Model.ListDatabasesError</div>
  }
  else
  {
    @if (Model.ShowDatabasePicker)
    {
      <script>
        if (jQuery('#DatabaseName')[0].showPicker)
        jQuery('#DatabaseName')[0].showPicker();
      </script>
    }
  }
  <div class="ms-auto mb-1">
    <button type="submit" class="btn btn-sm btn-success ms-2 nucleus-show-progress nucleus-show-progress-before" data-target="#site-databases" formaction="@Url.AreaAction("RefreshDatabases", "SiteWizard", "Setup")">Refresh</button>
  </div>  
}

<SettingsControl caption="Connection string" helptext="Enter or modify your database connection string.">
  @Html.TextAreaFor(model => model.DatabaseConnectionString, new { @rows = "3"})    
  <button class="copy-connection-string nucleus-material-icon btn btn-none align-self-end position-absolute fs-small" type="button" title="Copy connection string">&#xe14d;</button>    
</SettingsControl>

<div class="nucleus-button-panel mt-auto">
  <button class="btn btn-primary ms-auto" type="submit" title="Next" formaction="@Url.AreaAction("SaveDatabaseSettings", "SiteWizard", "Setup")">Next</button>
</div>