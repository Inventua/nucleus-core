@model Nucleus.DNN.Migration.ViewModels.Folder
@Html.AddStyle("~!/../index.css")
<h2 class="nucleus-control-panel-heading">Migrate DNN Folders and Files</h2>
<div>
  <div class="alert alert-primary">
    <ul>
      <li>
        This migration will copy folders, folder permissions and files from DNN to Nucleus.  You may find it easier and faster to copy the folders and 
        files manually and use this step to just migrate folder permissions. You can un-select the "Update Existing" switch to prevent the migration 
        process from copying files that are already present in the Nucleus file store.
      </li>
      <li>
        You must select a portal alias and the "use SSL" flag.  Your settings are used as the base for the Url which is used to download files from 
        your DNN site.
      </li>
    </ul>
  </div>

  @using (Html.BeginNucleusForm("MigrateFolders", "DNNMigration", "DNNMigration", FormMethod.Post, new { }))
  {
    <h3>DotNetNuke Source Information</h3>

    <div class="nucleus-flex-fields">
      <SettingsControl caption="Portal Alias" helptext="Select the portal alias to use when downloading files from DNN.">
        @Html.DropDownListFor(model => model.PortalAliasId, new SelectList(Model.AvailablePortalAliases, "PortalAliasId", "HttpAlias"), "(select)", new(){} )
      </SettingsControl>
      <SettingsControl caption="Use SSL?" helptext="Specifies whether to use SSL (https) or not (http) for file downloads.">
        @Html.CheckBoxFor(model => model.UseSSL, new { @class = "ToggleSwitch" })
      </SettingsControl>
    </div>

    @Html.HiddenFor(model => model.PortalId)
    <div class="nucleus-flex-fields">
      <SettingsControl caption="Update Existing Files?" rendermode="LabelLast" class="inner-inline" helptext="Specifies whether to re-download files when the file already exists in Nucleus.  Selected folders and folder settings are always migrated.">
        @Html.CheckBoxFor(model => model.UpdateExisting, new { @class = "ToggleSwitch" })
      </SettingsControl>

      <button type="submit" class="btn btn-primary nucleus-show-progress nucleus-show-progress-before" data-target="#MigrateFolders" data-confirm="Migrate selected folders and files from DotNetNuke now?  This action cannot be reversed.">Migrate Folders and Files</button>
    </div>

    <div class="my-2">
      <div class="overflow-auto">
        <table class="table table-striped table-sm table-sticky-headers table-align-top">
          <thead>
            <tr>
              <th>@Html.CheckBox("toggle-all", true, new { @class = "toggle-all", @id = "" } )</th>
              <th>Name</th>
              <th>Messages</th>
            </tr>
          </thead>
          <tbody>
            @{
              var index = 0;
            }
            @foreach (var folder in Model.Folders)
            {              
              <tr>
                <td>
                  @if (folder.CanSelect)
                  {
                    @Html.CheckBox($"Folders[{index}].IsSelected", folder.IsSelected, new { id = $"Folders{index}__IsSelected", @class = "folder-selection-checkbox", data_folderid = folder.FolderId, data_parentid = folder.ParentId })
                  }
                  @Html.Hidden($"Folders[{index}].CanSelect", folder.CanSelect, new { id = $"Folders_{index}__CanSelect" })
                  @Html.Hidden($"Folders[{index}].FolderId", folder.FolderId, new { id = $"Folders_{index}__FolderId" })
                </td>
                <td class="folder-level-@folder.Level" title="@folder.FolderPath">
                  @folder.FolderName
                </td>
                <td>
                  <ul class="validation-results">
                    <li>
                      @(folder.FolderCount == 0 ? "" : $"{folder.FolderCount} folders, ")@(folder.Files.Count == 0 ? (folder.FolderCount == 0 ? "No" : "no") : folder.Files.Count) files
                    </li>
                    @foreach (var result in folder.Results)
                    {
                      <li>
                        <span class="glyph-@result.Type">@result.Message</span>
                      </li>
                    }
                  </ul>
                </td>
              </tr>
              index++;
            }
          </tbody>
        </table>
      </div>
    </div>

  }
</div>
