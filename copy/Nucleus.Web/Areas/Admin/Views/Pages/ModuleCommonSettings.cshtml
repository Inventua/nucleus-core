@model Nucleus.Web.ViewModels.Admin.PageEditor
@addTagHelper "*, Nucleus.ViewFeatures"
@using Nucleus.ViewFeatures.HtmlHelpers
@using Nucleus.ViewFeatures
@using Nucleus.Abstractions.Models
@if (!String.IsNullOrEmpty(Model.UseLayout))
{
	Layout = Model.UseLayout;
}
<div class="ModuleSettings">
	@using (Html.BeginAreaForm("SaveModuleCommonSettings", "Pages", "Admin", FormMethod.Post, new { @data_target = ".ModuleCommonSettingsEditor", @autocomplete = "off" }))
	{
		@Html.HiddenFor((model) => model.Page.Id)
		<fieldset role="group" aria-labelledby="heading">
			<h2>@(String.IsNullOrEmpty(Model.Module.Title) ? "No Title" : @Model.Module.Title) Settings</h2>
			<a class="ClosePopup">&#xe5cd;</a>

			<Tab>
				<TabItem target="#module-properties" active="true" caption="Properties"></TabItem>
				<TabItem target="#module-permissions" caption="Permissions"></TabItem>
			</Tab>

			<TabContent>
				<TabPanel id="module-properties" active="true">
					@Html.HiddenFor((model) => model.Module.Id)
					@Html.HiddenFor((model) => model.Module.SortOrder)
					<SettingsControl caption="Module Type" helptext="Module Type">
						@if (Model.Module.Id == Guid.Empty)
						{
							@Html.DropDownListFor((model) => model.Module.ModuleDefinition.Id, new SelectList(Model.AvailableModules, "Id", "FriendlyName"), "(select module type)")
						}
						else
						{
							@Html.HiddenFor((model) => model.Module.ModuleDefinition.Id)
							@Model.Module.ModuleDefinition.FriendlyName
						}
					</SettingsControl>

					<SettingsControl caption="Title" helptext="Module Title">
						@Html.TextBoxFor((model) => model.Module.Title)
					</SettingsControl>

					<div class="Flex">
						<SettingsControl caption="Pane" helptext="Pane">
							@Html.DropDownListFor((model) => model.Module.Pane, new SelectList(Model.AvailablePanes))
						</SettingsControl>
						<SettingsControl caption="Container" helptext="Container">
							@Html.DropDownListFor((model) => model.Module.Container.Id, new SelectList(Model.Containers, "Id", "FriendlyName"))
						</SettingsControl>
						<SettingsControl caption="Style Classes" helptext="Applies additional CSS classes to the container.  Separate additional CSS classes with spaces.">
							@Html.TextBoxFor((model) => model.Module.Style)
						</SettingsControl>

					</div>

				</TabPanel>
				<TabPanel id="module-permissions">
					<div class="Tools">
						@Html.DropDownListFor((model) => model.SelectedModuleRoleId, new SelectList(Model.AvailableModuleRoles, "Id", "Name"), new { @class = "flex-fill" })
						<input type="submit" formaction="@Url.AreaAction("AddModulePermissionRole", "Pages", "Admin")?standalone=false" value="Add Role" data-target=".ModuleCommonSettingsEditor" />
					</div>
					@await Html.PartialAsync("ModulePermissions")
				</TabPanel>
			</TabContent>
		</fieldset>

		<div class="ButtonRow">
			<div class="Tools">
				@if (Model.Module.Id == Guid.Empty)
				{
					<input type="submit" value="Add Module" formaction="@Url.AreaAction("CreateModule", "Pages", "Admin")" data-target=".PageEditor" />
				}
				else
				{
					<input type="submit" value="Save Changes" formaction="@Url.AreaAction("SaveModuleCommonSettings", "Pages", "Admin")" data-target=".ModuleCommonSettingsEditor" />
				}
			</div>
		</div>
	}
</div>
